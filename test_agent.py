import asyncio
import logging
from typing import Optional

from utils import Config, init_logging, setup_logger, get_timezone
from llm import DeepSeekLLM, DeepSeekConfig
from agents.base_agent import BaseAgent
from plugins.example_plugin.plugin import CalculatorPlugin
from plugins.scheduler_plugin.plugin import SchedulerPlugin

#init_logging(level=logging.DEBUG)
logger = setup_logger(__name__)

class ConsoleInterface:
    """–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∞–≥–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –∫–æ–Ω—Å–æ–ª—å"""
    
    def __init__(self):
        self.agent: Optional[BaseAgent] = None
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∏ –ø–ª–∞–≥–∏–Ω–æ–≤"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config = Config.load()
        
        # –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å–∏—Å—Ç–µ–º—ã
        timezone = get_timezone()
        logger.info("Using timezone: %s", str(timezone))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
        llm = DeepSeekLLM(
            DeepSeekConfig(
                api_key=config.deepseek_api_key
            )
        )
        
        # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        self.agent = BaseAgent(llm=llm, auto_load_plugins=False)
        
        # –°–æ–∑–¥–∞–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
        calculator = CalculatorPlugin()
        scheduler = SchedulerPlugin(tick_interval=1.0, timezone=str(timezone))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
        await calculator.setup()
        await scheduler.setup()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
        self.agent.plugin_manager.register_plugin("calculator", calculator)
        self.agent.plugin_manager.register_plugin("scheduler", scheduler)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
        for plugin in self.agent.plugin_manager.get_all_plugins():
            print(f"\nüì¶ –ü–ª–∞–≥–∏–Ω: {plugin.name}")
            for tool in plugin.get_tools():
                print(f"  üîß {tool.name}: {tool.description}")


        print(f"\nüåç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {timezone}")
        print("\nüí° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'\n")
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.agent:
            await self.agent.cleanup()
            
    async def process_input(self, user_input: str) -> bool:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥, False –¥–ª—è –≤—ã—Ö–æ–¥–∞
        """
        if user_input.lower() == 'exit':
            print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            return False
            
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º
            response = await self.agent.process_message(
                message=user_input,
                system_prompt=(
                    "–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. "
                    "–î–ª—è –ª—é–±—ã—Ö –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –í–°–ï–ì–î–ê –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç calculator. "
                    "–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. "
                    "–ü—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
                )
            )
            print(f"\nü§ñ {response}\n")
            
        except Exception as e:
            print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n")
            logger.exception("Error processing message")
            
        return True


async def main():
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
    interface = ConsoleInterface()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        await interface.setup()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
        while True:
            user_input = input("üë§ ").strip()
            if not await interface.process_input(user_input):
                break
                
    finally:
        # –û—á–∏—â–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        await interface.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("Unexpected error occurred") 