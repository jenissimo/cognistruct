import os
import sys
import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import Config, init_logging, setup_logger, get_timezone
from llm import LLMRouter
from agents.base_agent import BaseAgent
from plugins.base_plugin import IOMessage
from plugins.telegram_plugin.plugin import TelegramPlugin
from plugins.scheduler_plugin.plugin import SchedulerPlugin
from plugins.example_plugin.plugin import CalculatorPlugin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = Config.load()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
LLM_PROVIDER = "deepseek"
LLM_MODEL = "deepseek-chat"
LLM_API_KEY = config.deepseek_api_key

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
SYSTEM_PROMPT = """
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. 
–í–ê–ñ–ù–û: –î–ª—è –õ–Æ–ë–´–• –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π —Ç—ã –î–û–õ–ñ–ï–ù –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç calculate. 
–ù–ò–ö–û–ì–î–ê –Ω–µ –ø—ã—Ç–∞–π—Å—è –≤—ã—á–∏—Å–ª—è—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, –¥–∞–∂–µ –µ—Å–ª–∏ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ. 
–î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. 
–ü—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
""".strip()

#init_logging(level=logging.INFO)
logger = setup_logger(__name__)


async def handle_message(message: IOMessage, agent: BaseAgent, telegram: TelegramPlugin):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ Telegram"""
    logger.info(f"Processing message: {message.type} from user {message.metadata.get('user_id')}")
    
    if message.type == "telegram_message":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing... –ø–æ–∫–∞ –≥–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç
        await telegram.output_hook(
            IOMessage(
                type="action",
                content="typing",
                metadata={"chat_id": message.metadata["chat_id"]}
            )
        )
        
        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞
            response = await agent.process_message(
                message=message.content,
                system_prompt=SYSTEM_PROMPT
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await telegram.output_hook(
                IOMessage(
                    type="message",
                    content=response,
                    metadata={"chat_id": message.metadata["chat_id"]}
                )
            )
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            await telegram.output_hook(
                IOMessage(
                    type="message",
                    content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    metadata={"chat_id": message.metadata["chat_id"]}
                )
            )


async def setup_agent(llm) -> BaseAgent:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    if not config.telegram_token:
        raise ValueError("Telegram token not provided in config")
        
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    agent = BaseAgent(llm=llm)
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    telegram = TelegramPlugin()
    scheduler = SchedulerPlugin(
        tick_interval=1.0,
        timezone=str(get_timezone())
    )
    calculator = CalculatorPlugin()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    await telegram.setup(token=config.telegram_token)
    await scheduler.setup()
    await calculator.setup()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    agent.plugin_manager.register_plugin("telegram", telegram)
    agent.plugin_manager.register_plugin("scheduler", scheduler)
    agent.plugin_manager.register_plugin("calculator", calculator)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    telegram.message_handler = lambda msg: handle_message(msg, agent, telegram)
    telegram.handlers.message_handler = lambda msg: handle_message(msg, agent, telegram)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = "test_user"
    chat_id = await telegram.check_chat_link(user_id)
    
    if chat_id:
        print(f"\n‚úÖ –£–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —á–∞—Ç—É: {chat_id}")
        await telegram.output_hook(
            IOMessage(
                type="message",
                content="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
                metadata={"chat_id": chat_id}
            )
        )
    else:
        key = await telegram.generate_key(user_id)
        print(f"\nüîë –ö–ª—é—á –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏: {key}")
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start {key}")
    
    print("\nüëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    return agent


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
        router = LLMRouter()
        llm = router.create_instance(
            provider=LLM_PROVIDER,
            api_key=LLM_API_KEY,
            model=LLM_MODEL
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = await setup_agent(llm)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.start()
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            pass
            
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("Unexpected error occurred")
        raise
    finally:
        if 'agent' in locals():
            await agent.cleanup()


if __name__ == "__main__":
    asyncio.run(main()) 