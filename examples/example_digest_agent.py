import os
import sys
import asyncio
import logging
from typing import Optional, Dict, Any
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import Config, init_logging, setup_logger, get_timezone
from llm import LLMRouter
from agents.base_agent import BaseAgent
from plugins.base_plugin import IOMessage
from plugins.telegram_plugin.plugin import TelegramPlugin
from plugins.scheduler_plugin.plugin import SchedulerPlugin
from plugins.versioned_storage.plugin import VersionedStoragePlugin
from plugins.internet_plugin.plugin import InternetPlugin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = Config.load()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
LLM_PROVIDER = "deepseek"
LLM_MODEL = "deepseek-chat"
LLM_API_KEY = config.deepseek_api_key

# –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã
INTERVIEW_PROMPT = """
–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø—Ä–æ–≤–æ–¥—è—â–∏–π –∏–Ω—Ç–µ—Ä–≤—å—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - —É–∑–Ω–∞—Ç—å —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
1. –ò–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã –∏ –æ–±–ª–∞—Å—Ç–∏ (—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –Ω–∞—É–∫–∞, –±–∏–∑–Ω–µ—Å –∏ —Ç.–¥.)
2. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
3. –ß–∞—Å—Ç–æ—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤ (—Ä–∞–∑ –≤ –¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é)
4. –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–∫—Ä–∞—Ç–∫–∏–π/–ø–æ–¥—Ä–æ–±–Ω—ã–π)
5. –õ—É—á—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–π–¥–∂–µ—Å—Ç–∞

–í–µ–¥–∏ –¥–∏–∞–ª–æ–≥ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, –∑–∞–¥–∞–≤–∞–π —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã.
–ö–æ–≥–¥–∞ —Å–æ–±–µ—Ä–µ—à—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç save_preferences.
""".strip()

DIGEST_PROMPT = """
–¢—ã - –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—å–∏ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã.

–ü—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Å—Ç–∞—Ç–µ–π:
1. –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
2. –û—Ü–µ–Ω–∏–≤–∞–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç–∞
3. –°–æ–∑–¥–∞–≤–∞–π –∫—Ä–∞—Ç–∫–∏–µ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ —Ä–µ–∑—é–º–µ

–ü—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∞–π–¥–∂–µ—Å—Ç–∞:
1. –ì—Ä—É–ø–ø–∏—Ä—É–π —Å—Ç–∞—Ç—å–∏ –ø–æ —Ç–µ–º–∞–º
2. –î–æ–±–∞–≤–ª—è–π —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—ã
3. –§–æ—Ä–º–∞—Ç–∏—Ä—É–π —Ç–µ–∫—Å—Ç –≤ Markdown
""".strip()

init_logging(level=logging.INFO)
logger = setup_logger(__name__)


class DigestAgent(BaseAgent):
    """–ê–≥–µ–Ω—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
    
    def __init__(self, llm):
        super().__init__(llm=llm)
        self.interview_completed = False
        self.current_question = 0
        self.interview_data = {}
        
    async def save_preferences(self, chat_id: str) -> str:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        storage = self.plugin_manager.get_plugin("storage")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –¥–ª—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
        prefs_id = storage.generate_id("preferences", f"user_{chat_id}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        await storage.create({
            "key": prefs_id,
            "value": self.interview_data,
            "metadata": {
                "type": "user_preferences",
                "user_id": chat_id,
                "created_at": datetime.now().isoformat()
            }
        })
        
        return prefs_id
        
    async def setup_digest_schedule(self, chat_id: str, time: str, interval: str):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤"""
        scheduler = self.plugin_manager.get_plugin("scheduler")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
        await scheduler.schedule_task(
            "crawl_articles",
            "0 */4 * * *",  # –ö–∞–∂–¥—ã–µ 4 —á–∞—Å–∞
            {
                "chat_id": chat_id,
                "action": "crawl"
            }
        )
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–∞–π–¥–∂–µ—Å—Ç–∞
        await scheduler.schedule_task(
            "send_digest",
            f"0 {time} */{interval} * *",
            {
                "chat_id": chat_id,
                "action": "digest"
            }
        )
        
    async def crawl_relevant_articles(self, chat_id: str):
        """–ü–æ–∏—Å–∫ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        storage = self.plugin_manager.get_plugin("storage")
        internet = self.plugin_manager.get_plugin("internet")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        prefs = await storage.search({
            "key_prefix": "preferences/",
            "latest_only": True,
            "tags": [f"user_{chat_id}"]
        })
        
        if not prefs:
            logger.error(f"Preferences not found for user {chat_id}")
            return
            
        # –î–ª—è –∫–∞–∂–¥–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π —Ç–µ–º—ã
        for topic in prefs[0]["value"]["topics"]:
            # –ò—â–µ–º —Å—Ç–∞—Ç—å–∏
            results = await internet.execute_tool("search", {
                "query": topic
            })
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            for result in results["results"]:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                content = await internet.execute_tool("crawl", {
                    "url": result["link"]
                })
                
                if content and not content.get("error"):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é
                    article_id = storage.generate_id("article", result["title"])
                    await storage.create({
                        "key": article_id,
                        "value": {
                            "title": result["title"],
                            "content": content["content"],
                            "url": result["link"]
                        },
                        "metadata": {
                            "type": "article",
                            "topic": topic,
                            "user_id": chat_id,
                            "created_at": datetime.now().isoformat()
                        }
                    })
                    
    async def generate_digest(self, chat_id: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∞–π–¥–∂–µ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–µ–π"""
        storage = self.plugin_manager.get_plugin("storage")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—å–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–∏–æ–¥
        articles = await storage.search({
            "key_prefix": "article/",
            "latest_only": True,
            "tags": [f"user_{chat_id}"]
        })
        
        if not articles:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –¥–∞–π–¥–∂–µ—Å—Ç–∞"
            
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–µ–º–∞–º
        topics = {}
        for article in articles:
            topic = article["metadata"]["topic"]
            if topic not in topics:
                topics[topic] = []
            topics[topic].append(article)
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–π–¥–∂–µ—Å—Ç
        digest = "# üì∞ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
        
        for topic, articles in topics.items():
            digest += f"## {topic}\n\n"
            for article in articles:
                digest += f"### [{article['value']['title']}]({article['value']['url']})\n"
                digest += f"{article['value']['content'][:200]}...\n\n"
                
        return digest


async def handle_message(message: IOMessage, agent: DigestAgent, telegram: TelegramPlugin):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.type != "telegram_message":
        return
        
    chat_id = message.metadata["chat_id"]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º typing...
    await telegram.output_hook(
        IOMessage(
            type="action",
            content="typing",
            metadata={"chat_id": chat_id}
        )
    )
    
    try:
        # –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–≤—å—é –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
        if not agent.interview_completed:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            response = await agent.process_message(
                message=message.content,
                system_prompt=INTERVIEW_PROMPT
            )
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å
            if "save_preferences" in response:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                prefs_id = await agent.save_preferences(chat_id)
                
                # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                time = agent.interview_data.get("preferred_time", "10:00")
                interval = agent.interview_data.get("digest_interval", "1")
                await agent.setup_digest_schedule(chat_id, time, interval)
                
                agent.interview_completed = True
                response = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –Ø –Ω–∞—Å—Ç—Ä–æ–∏–ª –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º. –ü–µ—Ä–≤—ã–π –≤—ã–ø—É—Å–∫ –ø—Ä–∏–¥–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è."
                
        else:
            # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
            response = await agent.process_message(
                message=message.content,
                system_prompt=DIGEST_PROMPT
            )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await telegram.output_hook(
            IOMessage(
                type="message",
                content=response,
                metadata={"chat_id": chat_id}
            )
        )
            
    except Exception as e:
        logger.error(f"Error processing message: {e}")
        await telegram.output_hook(
            IOMessage(
                type="message",
                content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.",
                metadata={"chat_id": chat_id}
            )
        )


async def handle_scheduled_task(task: Dict[str, Any], agent: DigestAgent, telegram: TelegramPlugin):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏"""
    chat_id = task["params"]["chat_id"]
    action = task["params"]["action"]
    
    try:
        if action == "crawl":
            await agent.crawl_relevant_articles(chat_id)
            
        elif action == "digest":
            digest = await agent.generate_digest(chat_id)
            await telegram.output_hook(
                IOMessage(
                    type="message",
                    content=digest,
                    metadata={"chat_id": chat_id}
                )
            )
            
    except Exception as e:
        logger.error(f"Error processing scheduled task: {e}")


async def setup_agent(llm) -> DigestAgent:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    if not config.telegram_token:
        raise ValueError("Telegram token not provided in config")
        
    # –°–æ–∑–¥–∞–µ–º –∞–≥–µ–Ω—Ç–∞
    agent = DigestAgent(llm=llm)
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    telegram = TelegramPlugin()
    scheduler = SchedulerPlugin(
        tick_interval=1.0,
        timezone=str(get_timezone())
    )
    storage = VersionedStoragePlugin()
    internet = InternetPlugin(
        max_search_results=10,
        min_word_count=50
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    await telegram.setup(token=config.telegram_token)
    await scheduler.setup()
    await storage.setup()
    await internet.setup()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    agent.plugin_manager.register_plugin("telegram", telegram)
    agent.plugin_manager.register_plugin("scheduler", scheduler)
    agent.plugin_manager.register_plugin("storage", storage)
    agent.plugin_manager.register_plugin("internet", internet)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    telegram.message_handler = lambda msg: handle_message(msg, agent, telegram)
    scheduler.task_handler = lambda task: handle_scheduled_task(task, agent, telegram)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_id = "test_user"
    chat_id = await telegram.check_chat_link(user_id)
    
    if chat_id:
        print(f"\n‚úÖ –£–∂–µ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —á–∞—Ç—É: {chat_id}")
        await telegram.output_hook(
            IOMessage(
                type="message",
                content="–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –æ –≤–∞—à–∏—Ö –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö.",
                metadata={"chat_id": chat_id}
            )
        )
    else:
        key = await telegram.generate_key(user_id)
        print(f"\nüîë –ö–ª—é—á –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏: {key}")
        print(f"üîó –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /start {key}")
    
    print("\nüëã –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    
    return agent


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
        router = LLMRouter()
        llm = router.create_instance(
            provider=LLM_PROVIDER,
            api_key=LLM_API_KEY,
            model=LLM_MODEL
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = await setup_agent(llm)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.start()
        
        # –ñ–¥–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while True:
                await asyncio.sleep(1)
        except asyncio.CancelledError:
            pass
            
    except KeyboardInterrupt:
        print("\n\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.exception("Unexpected error occurred")
        raise
    finally:
        if 'agent' in locals():
            await agent.cleanup()


if __name__ == "__main__":
    asyncio.run(main()) 