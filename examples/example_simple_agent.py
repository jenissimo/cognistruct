import os
import sys
import asyncio
import logging
from typing import Optional

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils import Config, init_logging, setup_logger, get_timezone
from llm import LLMRouter
from agents.base_agent import BaseAgent
from plugins.example_plugin.plugin import CalculatorPlugin
from plugins.scheduler_plugin.plugin import SchedulerPlugin
from plugins.short_term_memory.plugin import ShortTermMemoryPlugin

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
config = Config.load()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è LLM
LLM_PROVIDER = "deepseek"
LLM_MODEL = "deepseek-chat"
LLM_API_KEY = config.deepseek_api_key

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–≥–µ–Ω—Ç–∞
SYSTEM_PROMPT = """
–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç—å—é. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –¥–∞–≤–∞—Ç—å –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã.

–í–ê–ñ–ù–û:
1. –î–ª—è –õ–Æ–ë–´–• –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç calculate
2. –ù–ò–ö–û–ì–î–ê –Ω–µ –ø—ã—Ç–∞–π—Å—è –≤—ã—á–∏—Å–ª—è—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ
3. –î–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
4. –ü—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —É—á–∏—Ç—ã–≤–∞–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
5. –ï—Å–ª–∏ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (recent_messages), –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –¥–∏–∞–ª–æ–≥–∞

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:
User: –ö–∞–∫–æ–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏?
Assistant: –°—É–¥—è –ø–æ –Ω–∞—à–µ–π –ø—Ä–µ–¥—ã–¥—É—â–µ–π –±–µ—Å–µ–¥–µ, –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ Python –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.
""".strip()

init_logging(level=logging.INFO)
logger = setup_logger(__name__)


async def handle_console_input(user_input: str, agent: BaseAgent) -> bool:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞ –∏–∑ –∫–æ–Ω—Å–æ–ª–∏
    
    Returns:
        bool: True –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –¥–∏–∞–ª–æ–≥, False –¥–ª—è –≤—ã—Ö–æ–¥–∞
    """
    if user_input.lower() == 'exit':
        print("\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
        return False
        
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        response = await agent.process_message(
            message=user_input,
            system_prompt=SYSTEM_PROMPT
        )
        print(f"\nü§ñ {response}\n")
        
    except Exception as e:
        print(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}\n")
        logger.exception("Error processing message")
        
    return True


async def setup_agent(llm) -> BaseAgent:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≥–µ–Ω—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤–æ–≥–æ –∞–≥–µ–Ω—Ç–∞
    agent = BaseAgent(llm=llm, auto_load_plugins=False)
    
    # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    calculator = CalculatorPlugin()
    scheduler = SchedulerPlugin(
        tick_interval=1.0,
        timezone=str(get_timezone())
    )
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≥–∏–Ω –ø–∞–º—è—Ç–∏ —Å —Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 15 —Å–æ–æ–±—â–µ–Ω–∏–π
    # –≠—Ç–æ –¥–∞—Å—Ç –Ω–∞–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ –∏–∑ 7-8 –æ–±–º–µ–Ω–æ–≤ —Ä–µ–ø–ª–∏–∫–∞–º–∏,
    # —á—Ç–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–≤—è–∑–Ω–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞
    short_term_memory = ShortTermMemoryPlugin(
        max_messages=15  # –•—Ä–∞–Ω–∏–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã
    await calculator.setup()
    await scheduler.setup()
    await short_term_memory.setup()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–ª–∞–≥–∏–Ω—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    # Memory –ø–µ—Ä–≤—ã–º, —á—Ç–æ–±—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª—è–ª—Å—è –¥–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏–º–∏ –ø–ª–∞–≥–∏–Ω–∞–º–∏
    agent.plugin_manager.register_plugin("short_term_memory", short_term_memory)
    agent.plugin_manager.register_plugin("calculator", calculator)
    agent.plugin_manager.register_plugin("scheduler", scheduler)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞)
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:")
    for plugin in [calculator, scheduler]:
        print(f"\nüì¶ –ü–ª–∞–≥–∏–Ω: {plugin.name}")
        for tool in plugin.get_tools():
            print(f"  üîß {tool.name}: {tool.description}")

    print(f"\nüåç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {get_timezone()}")
    print("\nüí° –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'\n")
    
    return agent


async def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º LLM
        router = LLMRouter()
        llm = router.create_instance(
            provider=LLM_PROVIDER,
            api_key=LLM_API_KEY,
            model=LLM_MODEL
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        agent = await setup_agent(llm)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≥–µ–Ω—Ç–∞
        await agent.start()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
        while True:
            try:
                user_input = input("üë§ ").strip()
                if not await handle_console_input(user_input, agent):
                    break
            except KeyboardInterrupt:
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –∏ –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
                
    except Exception as e:
        logger.exception("Unexpected error occurred")
        raise
    finally:
        if 'agent' in locals():
            await agent.cleanup()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –∏ –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º") 