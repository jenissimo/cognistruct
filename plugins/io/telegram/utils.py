import logging
from typing import List, Any
import telegramify_markdown
from telegramify_markdown.customize import markdown_symbol
from telegramify_markdown.interpreters import BaseInterpreter, MermaidInterpreter
from telegramify_markdown.type import ContentTypes
import aiohttp
from io import BytesIO

logger = logging.getLogger(__name__)

async def format_message(content: str) -> List[Any]:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
    
    Args:
        content: –ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        
    Returns:
        List[Any]: –°–ø–∏—Å–æ–∫ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        markdown_symbol.head_level_1 = "üìå"
        markdown_symbol.link = "üîó"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è MermaidInterpreter
        async with aiohttp.ClientSession() as session:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            boxes = await telegramify_markdown.telegramify(
                content=content,
                interpreters_use=[
                    BaseInterpreter(),
                    MermaidInterpreter(session=None)
                ],
                latex_escape=True,
                normalize_whitespace=True,
                max_word_count=4090
            )
            return boxes
            
    except Exception as e:
        logger.error(f"Error formatting message: {e}")
        logger.exception("Full traceback:")
        raise

async def send_content_box(bot, chat_id: str, item: Any):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    
    Args:
        bot: –≠–∫–∑–µ–º–ø–ª—è—Ä TelegramBot
        chat_id: ID —á–∞—Ç–∞
        item: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    """
    try:
        logger.info(f"Sending item type: {item.content_type}")
        
        if item.content_type == ContentTypes.TEXT:
            logger.debug("Sending TEXT")
            await bot.send_message(
                chat_id=chat_id,
                text=item.content,
                parse_mode="MarkdownV2"
            )
        elif item.content_type == ContentTypes.PHOTO:
            logger.debug("Sending PHOTO")
            photo_data = BytesIO(item.file_data)
            photo_data.name = item.file_name
            await bot.app.bot.send_photo(
                chat_id=chat_id,
                photo=photo_data,
                caption=item.caption,
                parse_mode="MarkdownV2"
            )
        elif item.content_type == ContentTypes.FILE:
            logger.debug("Sending FILE")
            file_data = BytesIO(item.file_data)
            file_data.name = item.file_name
            await bot.app.bot.send_document(
                chat_id=chat_id,
                document=file_data,
                caption=item.caption,
                parse_mode="MarkdownV2"
            )
    except Exception as e:
        logger.error(f"Error sending item {item}: {e}")
        logger.exception("Full traceback:")
        raise 