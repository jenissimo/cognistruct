import asyncio
from typing import Optional, Callable, Awaitable, Any
from rich.console import Console, Group
from rich.markdown import Markdown
from rich.live import Live
from rich.text import Text
from rich.panel import Panel
from rich.layout import Layout
import sys

from plugins.base_plugin import BasePlugin, PluginMetadata, IOMessage


class ConsolePlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º/–≤—ã–≤–æ–¥–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    
    def __init__(self, 
                 prompt: str = "üë§ ",
                 exit_command: str = "exit",
                 exit_message: str = "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                 use_markdown: bool = True,
                 use_emojis: bool = True,
                 refresh_rate: int = 10):
        """
        Args:
            prompt: –°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
            exit_command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            exit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            use_markdown: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
            use_emojis: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –≤—ã–≤–æ–¥–µ
            refresh_rate: –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ (–∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        """
        super().__init__()
        self.prompt = prompt
        self.exit_command = exit_command
        self.exit_message = exit_message
        self.use_markdown = use_markdown
        self.use_emojis = use_emojis
        self.refresh_rate = refresh_rate
        self.message_handler: Optional[Callable[[IOMessage], Awaitable[None]]] = None
        self._running = False
        self.console = Console()
        
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="console",
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞",
            version="1.1.0",
            priority=100  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è I/O
        )
        
    def set_message_handler(self, handler: Callable[[IOMessage], Awaitable[None]]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_handler = handler
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        self._running = True
        
        while self._running:
            try:
                user_input = input(self.prompt).strip()
                
                if user_input.lower() == self.exit_command:
                    print(self.exit_message)
                    break
                    
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = IOMessage(
                    type="console_input",
                    content=user_input,
                    source="console"
                )
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                if self.message_handler:
                    await self.message_handler(message)
                    
            except KeyboardInterrupt:
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –∏ –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                print("\033[2K\033[G", end="")
                print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
                
        self._running = False
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞"""
        self._running = False
        
    def format_output(self, content: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not self.use_emojis:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            content = content.replace("ü§ñ", "Bot:")
            
        return content
    
    def print_tool_call(self, tool_call: Any, return_str: bool = False) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            tool_call: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            return_str: –í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏
            
        Returns:
            str –µ—Å–ª–∏ return_str=True, –∏–Ω–∞—á–µ None
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        tool_name = tool_call.tool if hasattr(tool_call, 'tool') else str(tool_call)
        prefix = "üîß " if self.use_emojis else ""
        text = f"> {prefix}**–ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: {tool_name}..."
        
        if return_str:
            return text
            
        # –ü–µ—á–∞—Ç–∞–µ–º —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.use_markdown:
            self.console.print(Markdown(text), style="yellow")
        else:
            # –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è plain text
            plain_text = text.replace('**', '')
            self.console.print(plain_text, style="yellow")
            
    def print_tool_result(self, result: str, return_str: bool = False) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            return_str: –í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏
            
        Returns:
            str –µ—Å–ª–∏ return_str=True, –∏–Ω–∞—á–µ None
        """
        # –§–æ—Ä–º–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        prefix = "‚úÖ " if self.use_emojis else ""
        text = f"> {prefix}**–†–µ–∑—É–ª—å—Ç–∞—Ç**: {result}"
        
        if return_str:
            return text
            
        # –ü–µ—á–∞—Ç–∞–µ–º —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.use_markdown:
            self.console.print(Markdown(text), style="green")
        else:
            # –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è plain text
            plain_text = text.replace('**', '')
            self.console.print(plain_text, style="green")

    async def handle_markdown_stream(self, message: str, stream: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown"""
        current_content = ""
        current_tool = None
        first_chunk = True
        sections = []  # –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        def render_sections():
            """–†–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å"""
            rendered = []
            for section in sections:
                if section["type"] == "text":
                    rendered.append(Markdown(section["content"]))
                elif section["type"] == "tool":
                    rendered.append(Text())  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–º
                    rendered.append(
                        Markdown(self.print_tool_call(section['content'], return_str=True))
                    )
                elif section["type"] == "result":
                    rendered.append(Text())  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
                    rendered.append(
                        Markdown(self.print_tool_result(section['content'], return_str=True))
                    )
            
            return Panel(
                Group(*rendered),
                title="ü§ñ –û—Ç–≤–µ—Ç",
                border_style="blue",
                padding=(0, 1)
            )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        sections.append({"type": "text", "content": ""})
        
        with Live(
            render_sections(),
            console=self.console,
            refresh_per_second=self.refresh_rate,
            vertical_overflow="visible",
            auto_refresh=True
        ) as live:
            async for chunk in stream:
                if first_chunk and not chunk.delta:
                    first_chunk = False
                    continue
                    
                if chunk.delta:
                    current_content += chunk.delta
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                    for section in reversed(sections):
                        if section["type"] == "text":
                            section["content"] += chunk.delta
                            break
                    live.update(render_sections())
                    first_chunk = False
                
                if chunk.tool_call and not current_tool:
                    current_tool = chunk.tool_call
                    sections.append({"type": "tool", "content": current_tool})
                    sections.append({"type": "text", "content": ""})
                    live.update(render_sections())
                
                if chunk.tool_result:
                    sections.append({"type": "result", "content": chunk.tool_result})
                    sections.append({"type": "text", "content": ""})
                    current_tool = None
                    live.update(render_sections())
            
            return current_content
        
    async def handle_regular_stream(self, message: str, stream: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∞ –±–µ–∑ Markdown"""
        current_content = ""
        current_tool = None
        first_chunk = True
        
        # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–∞–º–∫—É
        print()
        self.console.print("ü§ñ –û—Ç–≤–µ—Ç:", style="blue bold")
        
        async for chunk in stream:            
            if first_chunk and not chunk.delta:
                first_chunk = False
                continue
                
            if chunk.delta:
                current_content += chunk.delta
                # –°—Ä–∞–∑—É –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫
                self.console.print(chunk.delta, end="")
                first_chunk = False
            
            if chunk.tool_call and not current_tool:
                current_tool = chunk.tool_call
                self.print_tool_call(current_tool)
            
            if chunk.tool_result:
                self.print_tool_result(chunk.tool_result)
                current_tool = None
        
        print("\n")
        return current_content

    async def handle_stream(self, message: str, stream: Any):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            stream: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∏–º-—á–∞–Ω–∫–æ–≤
        """
        if self.use_markdown:
            return await self.handle_markdown_stream(message, stream)
        else:
            return await self.handle_regular_stream(message, stream)

    async def output_hook(self, message: IOMessage):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        
        if message.type == "stream" and message.stream:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥ –Ω–∞–ø—Ä—è–º—É—é
            await self.handle_stream(message.content, message.stream)
            return
        
        # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
        if message.type in ["message", "text"]:
            prefix = "ü§ñ " if self.use_emojis else "Bot: "
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ
            content = message.content.content if hasattr(message.content, 'content') else str(message.content)
            content = self.format_output(content)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å tool_calls –≤ LLMResponse, –≤—ã–≤–æ–¥–∏–º –∏—Ö –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
            if hasattr(message.content, 'tool_calls') and message.content.tool_calls:
                for tool_call in message.content.tool_calls:
                    self.print_tool_call(tool_call)
                    # –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if self.use_markdown:
                self.console.print(Panel(
                    Markdown(content),
                    title=prefix.strip(),
                    border_style="blue"
                ))
            else:
                print(f"{prefix}{content}")
            print()
            
        elif message.type == "error":
            print("[DEBUG] Handling error message", file=sys.stderr)
            prefix = "‚ùå " if self.use_emojis else "Error: "
            self.console.print(Panel(
                Text(message.content, style="red"),
                title=prefix.strip(),
                border_style="red"
            ))
            print() 