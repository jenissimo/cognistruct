import asyncio
from typing import Optional, Callable, Awaitable
from rich.console import Console
from rich.markdown import Markdown

from plugins.base_plugin import BasePlugin, PluginMetadata, IOMessage


class ConsolePlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º/–≤—ã–≤–æ–¥–æ–º"""
    
    def __init__(self, 
                 prompt: str = "üë§ ",
                 exit_command: str = "exit",
                 exit_message: str = "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                 use_markdown: bool = True,
                 use_emojis: bool = True):
        """
        Args:
            prompt: –°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
            exit_command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            exit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            use_markdown: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
            use_emojis: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –≤—ã–≤–æ–¥–µ
        """
        super().__init__()
        self.prompt = prompt
        self.exit_command = exit_command
        self.exit_message = exit_message
        self.use_markdown = use_markdown
        self.use_emojis = use_emojis
        self.message_handler: Optional[Callable[[IOMessage], Awaitable[None]]] = None
        self._running = False
        self.console = Console()
        
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="console",
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞",
            version="1.0.0",
            priority=100  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è I/O
        )
        
    def set_message_handler(self, handler: Callable[[IOMessage], Awaitable[None]]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.message_handler = handler
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        self._running = True
        
        while self._running:
            try:
                user_input = input(self.prompt).strip()
                
                if user_input.lower() == self.exit_command:
                    print(self.exit_message)
                    break
                    
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = IOMessage(
                    type="console_input",
                    content=user_input,
                    source="console"
                )
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                if self.message_handler:
                    await self.message_handler(message)
                    
            except KeyboardInterrupt:
                # –û—á–∏—â–∞–µ–º –±—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –∏ –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                print("\033[2K\033[G", end="")
                print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
                
        self._running = False
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞"""
        self._running = False
        
    def format_output(self, content: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not self.use_emojis:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            content = content.replace("ü§ñ", "Bot:")
            
        return content
        
    async def output_hook(self, message: IOMessage):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å"""
        if message.type in ["message", "text"]:
            prefix = "ü§ñ " if self.use_emojis else "Bot: "
            content = self.format_output(message.content)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã
            print()
            if self.use_markdown:
                # –°–æ–∑–¥–∞–µ–º –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º Markdown
                md = Markdown(content)
                self.console.print(prefix, end="")
                self.console.print(md)
            else:
                print(f"{prefix}{content}")
            print()
            
        elif message.type == "error":
            prefix = "‚ùå " if self.use_emojis else "Error: "
            print(f"\n{prefix}{message.content}\n") 