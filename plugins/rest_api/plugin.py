import os
import jwt
import asyncio
import logging
from datetime import datetime, timedelta
from typing import Optional, Dict, Any, List
from functools import wraps

from fastapi import FastAPI, HTTPException, Depends, Security, Body
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
from fastapi.openapi.utils import get_openapi
from pydantic import BaseModel, Field
import uvicorn

from plugins.base_plugin import BasePlugin, IOMessage

logger = logging.getLogger(__name__)

# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
class TokenData(BaseModel):
    """–î–∞–Ω–Ω—ã–µ JWT —Ç–æ–∫–µ–Ω–∞"""
    username: str
    scopes: List[str] = Field(
        default_factory=list,
        description="–°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    )

class ChatRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∫ —á–∞—Ç—É —Å –∞–≥–µ–Ω—Ç–æ–º"""
    message: str = Field(
        ...,
        description="–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≥–µ–Ω—Ç–∞",
        example="–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"
    )
    system_prompt: Optional[str] = Field(
        None,
        description="–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞",
        example="–¢—ã - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É."
    )

class CRUDSRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –∫ CRUDS –º–µ—Ç–æ–¥–∞–º"""
    data: Dict[str, Any] = Field(
        ...,
        description="–î–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
        example={"title": "–ó–∞–º–µ—Ç–∫–∞", "content": "–¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏"}
    )
    query: Optional[Dict[str, Any]] = Field(
        None,
        description="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞",
        example={"tags": ["important"]}
    )
    id: Optional[str] = Field(
        None,
        description="–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ä–µ—Å—É—Ä—Å–∞",
        example="note_123"
    )

class APIResponse(BaseModel):
    """–û—Ç–≤–µ—Ç API"""
    status: str = Field(
        default="success",
        description="–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: success –∏–ª–∏ error"
    )
    data: Optional[Any] = Field(
        None,
        description="–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞"
    )
    error: Optional[str] = Field(
        None,
        description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"
    )

class RESTApiPlugin(BasePlugin):
    """REST API –ø–ª–∞–≥–∏–Ω —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π CRUDS —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""

    def __init__(
        self,
        host: str = "0.0.0.0",
        port: int = 8000,
        jwt_secret: Optional[str] = None,
        jwt_algorithm: str = "HS256",
        token_expire_minutes: int = 30,
        enable_auth: bool = False,
        allowed_origins: List[str] = None,
        admin_username: Optional[str] = None,
        admin_password: Optional[str] = None
    ):
        super().__init__()
        self.host = host
        self.port = port
        self.jwt_secret = jwt_secret or os.urandom(32).hex()
        self.jwt_algorithm = jwt_algorithm
        self.token_expire_minutes = token_expire_minutes
        self.enable_auth = enable_auth or bool(admin_username and admin_password)
        self.allowed_origins = allowed_origins or ["*"]
        self.admin_username = admin_username
        self.admin_password = admin_password
        
        # –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        self.app = FastAPI(
            title="CogniStruct API",
            description="""
            REST API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–≥–∏–Ω–∞–º –∏ —á–∞—Ç—É —Å –∞–≥–µ–Ω—Ç–æ–º.
            
            ## –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            
            ### üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            - –ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞ —á–µ—Ä–µ–∑ `/auth/token`
            - –ó–∞—â–∏—Ç–∞ —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ Bearer Authentication
            
            ### üí¨ –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º
            - –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ `/chat`
            - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤
            
            ### üì¶ CRUDS API –¥–ª—è –ø–ª–∞–≥–∏–Ω–æ–≤
            –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CRUDS –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—é—Ç—Å—è —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:
            - `POST /api/{plugin}` - —Å–æ–∑–¥–∞–Ω–∏–µ
            - `GET /api/{plugin}/{id}` - —á—Ç–µ–Ω–∏–µ
            - `PUT /api/{plugin}/{id}` - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            - `DELETE /api/{plugin}/{id}` - —É–¥–∞–ª–µ–Ω–∏–µ
            - `POST /api/{plugin}/search` - –ø–æ–∏—Å–∫
            
            ## –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            
            ### –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞
            ```bash
            curl -X POST "http://localhost:8000/auth/token" \\
                 -d "username=admin&password=secret"
            ```
            
            ### –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º
            ```bash
            curl -X POST "http://localhost:8000/chat" \\
                 -H "Authorization: Bearer YOUR_TOKEN" \\
                 -H "Content-Type: application/json" \\
                 -d '{"message": "–ü—Ä–∏–≤–µ—Ç!", "system_prompt": "–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º"}'
            ```
            
            ### –†–∞–±–æ—Ç–∞ —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            ```bash
            # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
            curl -X POST "http://localhost:8000/api/storage" \\
                 -H "Authorization: Bearer YOUR_TOKEN" \\
                 -H "Content-Type: application/json" \\
                 -d '{"data": {"title": "–ó–∞–º–µ—Ç–∫–∞", "content": "–¢–µ–∫—Å—Ç"}}'
                 
            # –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫
            curl -X POST "http://localhost:8000/api/storage/search" \\
                 -H "Authorization: Bearer YOUR_TOKEN" \\
                 -H "Content-Type: application/json" \\
                 -d '{"query": {"tags": ["important"]}}'
            ```
            """,
            version="1.0.0",
            docs_url="/docs",
            redoc_url="/redoc"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º CORS
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=self.allowed_origins,
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –°—Ö–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.security = HTTPBearer()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
        self._setup_routes()
        
        # –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º OpenAPI —Å—Ö–µ–º—É
        def custom_openapi():
            if self.app.openapi_schema:
                return self.app.openapi_schema
                
            openapi_schema = get_openapi(
                title=self.app.title,
                version=self.app.version,
                description=self.app.description,
                routes=self.app.routes
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º Bearer Auth
            openapi_schema["components"]["securitySchemes"] = {
                "Bearer": {
                    "type": "http",
                    "scheme": "bearer",
                    "bearerFormat": "JWT"
                }
            }
            
            self.app.openapi_schema = openapi_schema
            return self.app.openapi_schema
            
        self.app.openapi = custom_openapi
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–∞—Å–∫–µ
        asyncio.create_task(self._run_server())
        
    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        # TODO: Graceful shutdown
        pass
        
    def _setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Ä–æ—É—Ç–æ–≤"""
        
        # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
        @self.app.post(
            "/auth/token",
            response_model=APIResponse,
            tags=["auth"],
            summary="–ü–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞",
            description="""
            –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞.
            –¢–æ–∫–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞–º.
            """
        )
        async def login(
            username: str = Body(..., example="admin"),
            password: str = Body(..., example="secret")
        ):
            if not self.enable_auth:
                raise HTTPException(400, "Authentication is disabled")
                
            if not self.admin_username or not self.admin_password:
                raise HTTPException(500, "Admin credentials not configured")
                
            if username == self.admin_username and password == self.admin_password:
                token = self._create_token({
                    "username": username,
                    "scopes": ["admin"]
                })
                return APIResponse(data={"access_token": token})
            raise HTTPException(401, "Invalid credentials")
            
        # –ß–∞—Ç —Å –∞–≥–µ–Ω—Ç–æ–º
        @self.app.post(
            "/chat",
            response_model=APIResponse,
            tags=["chat"],
            summary="–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É",
            description="""
            –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–≥–µ–Ω—Ç—É –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞.
            –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è.
            """
        )
        async def chat(
            request: ChatRequest,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
                
            try:
                response = await self.agent.process_message(
                    message=request.message,
                    system_prompt=request.system_prompt
                )
                return APIResponse(data={"response": response})
            except Exception as e:
                logger.exception("Error processing chat request")
                raise HTTPException(500, str(e))
                
    async def _register_plugin_routes(self, plugin_name: str, plugin: BasePlugin):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è CRUDS —Ä–æ—É—Ç–æ–≤ –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ CRUDS –º–µ—Ç–æ–¥–æ–≤
        has_cruds = all(
            hasattr(plugin, method) 
            for method in ['create', 'read', 'update', 'delete', 'search']
        )
        
        if not has_cruds:
            return
            
        # Create
        @self.app.post(
            f"/api/{plugin_name}",
            response_model=APIResponse,
            tags=[plugin_name],
            summary=f"–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ {plugin_name}",
            description=f"–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin_name}"
        )
        async def create(
            request: CRUDSRequest,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
            result = await plugin.create(request.data)
            return APIResponse(data=result)
            
        # Read
        @self.app.get(
            f"/api/{plugin_name}/{{id}}",
            response_model=APIResponse,
            tags=[plugin_name],
            summary=f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ {plugin_name}",
            description=f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin_name}"
        )
        async def read(
            id: str,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
            result = await plugin.read(id)
            if result is None:
                raise HTTPException(404, "Not found")
            return APIResponse(data=result)
            
        # Update
        @self.app.put(
            f"/api/{plugin_name}/{{id}}",
            response_model=APIResponse,
            tags=[plugin_name],
            summary=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –≤ {plugin_name}",
            description=f"–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin_name}"
        )
        async def update(
            id: str,
            request: CRUDSRequest,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
            result = await plugin.update(id, request.data)
            if not result:
                raise HTTPException(404, "Not found")
            return APIResponse(data={"success": True})
            
        # Delete
        @self.app.delete(
            f"/api/{plugin_name}/{{id}}",
            response_model=APIResponse,
            tags=[plugin_name],
            summary=f"–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –∏–∑ {plugin_name}",
            description=f"–£–¥–∞–ª–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ ID —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin_name}"
        )
        async def delete(
            id: str,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
            result = await plugin.delete(id)
            if not result:
                raise HTTPException(404, "Not found")
            return APIResponse(data={"success": True})
            
        # Search
        @self.app.post(
            f"/api/{plugin_name}/search",
            response_model=APIResponse,
            tags=[plugin_name],
            summary=f"–ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ {plugin_name}",
            description=f"–ü–æ–∏—Å–∫ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin_name}"
        )
        async def search(
            request: CRUDSRequest,
            token: Optional[HTTPAuthorizationCredentials] = Security(self.security) if self.enable_auth else None
        ):
            if self.enable_auth:
                await self._verify_token(token)
            result = await plugin.search(request.query or {})
            return APIResponse(data=result)
            
    def _create_token(self, data: dict) -> str:
        """–°–æ–∑–¥–∞–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
        expires = datetime.utcnow() + timedelta(minutes=self.token_expire_minutes)
        to_encode = data.copy()
        to_encode.update({"exp": expires})
        return jwt.encode(to_encode, self.jwt_secret, algorithm=self.jwt_algorithm)
        
    async def _verify_token(self, credentials: HTTPAuthorizationCredentials) -> TokenData:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç JWT —Ç–æ–∫–µ–Ω"""
        try:
            payload = jwt.decode(
                credentials.credentials,
                self.jwt_secret,
                algorithms=[self.jwt_algorithm]
            )
            username: str = payload.get("username")
            if username is None:
                raise HTTPException(401, "Invalid token")
            return TokenData(username=username)
        except jwt.ExpiredSignatureError:
            raise HTTPException(401, "Token expired")
        except jwt.JWTError:
            raise HTTPException(401, "Invalid token")
            
    async def _run_server(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç FastAPI —Å–µ—Ä–≤–µ—Ä"""
        config = uvicorn.Config(
            self.app,
            host=self.host,
            port=self.port,
            log_level="info"
        )
        server = uvicorn.Server(config)
        await server.serve()
        
    async def on_plugin_registered(self, plugin_name: str, plugin: BasePlugin):
        """–•—É–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–ª–∞–≥–∏–Ω–∞"""
        await self._register_plugin_routes(plugin_name, plugin) 