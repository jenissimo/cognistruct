import asyncio
import uuid
from typing import Optional, Any, Callable, Awaitable, AsyncGenerator, Union
import sys
from rich import print
from rich.markdown import Markdown
from rich.live import Live
from rich.panel import Panel
from rich.text import Text
from rich.console import Group, Console

from cognistruct.core import BasePlugin, PluginMetadata, IOMessage, RequestContext
from cognistruct.utils.logging import setup_logger

logger = setup_logger(__name__)


class ConsolePlugin(BasePlugin):
    """–ü–ª–∞–≥–∏–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å–Ω—ã–º –≤–≤–æ–¥–æ–º/–≤—ã–≤–æ–¥–æ–º —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    DEFAULT_USER_ID = "console_user"
    
    def __init__(self, 
                 prompt: str = "üë§ ",
                 exit_command: str = "exit",
                 exit_message: str = "\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
                 use_markdown: bool = True,
                 use_emojis: bool = True,
                 refresh_rate: int = 10):
        """
        Args:
            prompt: –°—Ç—Ä–æ–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤–≤–æ–¥–∞
            exit_command: –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞
            exit_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            use_markdown: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
            use_emojis: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç–º–æ–¥–∑–∏ –≤ –≤—ã–≤–æ–¥–µ
            refresh_rate: –ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–µ (–∫–∞–¥—Ä–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É)
        """
        super().__init__()
        self.prompt = prompt
        self.exit_command = exit_command
        self.exit_message = exit_message
        self.use_markdown = use_markdown
        self.use_emojis = use_emojis
        self.refresh_rate = refresh_rate
        self.message_handler: Optional[Callable[
            [Union[str, IOMessage], ...],  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–∞ –∏ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            Union[str, AsyncGenerator[IOMessage, None]]  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        ]] = None
        self._running = False
        self.console = Console()
        self._input_future: Optional[asyncio.Future] = None
        self._current_stream: Optional[Live] = None
        self._session_id = str(uuid.uuid4())  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID —Å–µ—Å—Å–∏–∏
        
    async def setup(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞"""
        await super().setup()
        logger.info("Initialized console plugin with default user ID: %s", self.DEFAULT_USER_ID)
        
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="console",
            description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞/–≤—ã–≤–æ–¥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Å—Ç—Ä–∏–º–∏–Ω–≥–∞",
            version="1.1.0",
            priority=100  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è I/O
        )
        
    def set_message_handler(
        self, 
        handler: Callable[
            [Union[str, IOMessage], ...],  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –≤—Ö–æ–¥–∞ –∏ –¥–æ–ø. –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            Union[str, AsyncGenerator[IOMessage, None]]  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –æ–±—ã—á–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        ]
    ):
        """
        –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            handler: –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø—Ä–∏–Ω–∏–º–∞—é—â–∞—è —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å—Ç—Ä–æ–∫—É –∏–ª–∏ IOMessage)
                    –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
        """
        self.message_handler = handler
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–Ω—Å–æ–ª—å–Ω–æ–≥–æ –≤–≤–æ–¥–∞"""
        self._running = True
        
        while self._running:
            try:
                user_input = input(self.prompt).strip()
                
                if user_input.lower() == self.exit_command:
                    print(self.exit_message)
                    break
                    
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º user_id
                context = RequestContext(
                    user_id=self.DEFAULT_USER_ID,
                    metadata={
                        "source": "console"
                    }
                )
                
                # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
                message = IOMessage(
                    type="console_input",
                    content=user_input,
                    source="console",
                    context=context
                )
                
                # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
                if self.message_handler:
                    response = await self.message_handler(message)
                    
                    if isinstance(response, (str, IOMessage)):
                        # –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–æ–∑–¥–∞–µ–º IOMessage
                        if isinstance(response, str):
                            response = IOMessage(
                                type="text",
                                content=response,
                                source="agent",
                                context=context  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                            )
                        # BaseAgent —Å–∞–º –≤—ã–∑–æ–≤–µ—Ç output_hook
                        
                    elif hasattr(response, '__aiter__'):
                        # –î–ª—è —Å—Ç—Ä–∏–º–∞ —Å–æ–∑–¥–∞–µ–º IOMessage —Å–æ —Å—Ç—Ä–∏–º–æ–º
                        stream_message = IOMessage.create_stream(
                            response, 
                            source="agent",
                            context=context  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        )
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ streaming_output_hook
                        async for chunk in self.streaming_output_hook(stream_message):
                            # –ß–∞–Ω–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ streaming_output_hook
                            pass
                
            except KeyboardInterrupt:
                print("\033[2K\033[G", end="")
                print("\nüëã –†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
                
        self._running = False
        
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–≤–æ–¥–∞"""
        self._running = False
        
    def format_output(self, content: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        if not self.use_emojis:
            # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã
            content = content.replace("ü§ñ", "Bot:")
            
        return content
    
    def print_tool_call(self, tool_call: Any, return_str: bool = False) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç –≤—ã–∑–æ–≤ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            tool_call: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–∑–æ–≤–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            return_str: –í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏
            
        Returns:
            str –µ—Å–ª–∏ return_str=True, –∏–Ω–∞—á–µ None
        """
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        if isinstance(tool_call, dict) and 'function' in tool_call:
            tool_name = tool_call['function']['name']
        elif hasattr(tool_call, 'function') and hasattr(tool_call.function, 'name'):
            tool_name = tool_call.function.name
        else:
            tool_name = str(tool_call)
            
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        prefix = "üîß " if self.use_emojis else ""
        text = f"> {prefix}**–ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: {tool_name}..."
        
        if return_str:
            return text
            
        # –ü–µ—á–∞—Ç–∞–µ–º —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.use_markdown:
            self.console.print(Markdown(text), style="yellow")
        else:
            # –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è plain text
            plain_text = text.replace('**', '')
            self.console.print(plain_text, style="yellow")
            
    def print_tool_result(self, result: Any, return_str: bool = False) -> Optional[str]:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        
        Args:
            result: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ (—Å–ª–æ–≤–∞—Ä—å –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞)
            return_str: –í–µ—Ä–Ω—É—Ç—å —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ –ø–µ—á–∞—Ç–∏
            
        Returns:
            str –µ—Å–ª–∏ return_str=True, –∏–Ω–∞—á–µ None
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è –µ—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å
        if isinstance(result, dict):
            if "answer" in result:
                result_text = result["answer"]
            elif "error" in result:
                result_text = f"–û—à–∏–±–∫–∞: {result['error']}"
            else:
                result_text = str(result)
        else:
            result_text = str(result)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        prefix = "‚úÖ " if self.use_emojis else ""
        text = f"> {prefix}**–†–µ–∑—É–ª—å—Ç–∞—Ç**: {result_text}"
        
        if return_str:
            return text
            
        # –ü–µ—á–∞—Ç–∞–µ–º —Å –Ω—É–∂–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        if self.use_markdown:
            self.console.print(Markdown(text), style="green")
        else:
            # –£–±–∏—Ä–∞–µ–º markdown-—Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è plain text
            plain_text = text.replace('**', '')
            self.console.print(plain_text, style="green")

    async def handle_markdown_stream(self, message: str, stream: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown"""
        current_content = ""
        current_tool = None
        first_chunk = True
        sections = []  # –°–ø–∏—Å–æ–∫ —Å–µ–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        need_refresh = False
        
        def render_sections():
            """–†–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å"""
            rendered = []
            for section in sections:
                if section["type"] == "text":
                    rendered.append(Markdown(section["content"]))
                elif section["type"] == "tool":
                    rendered.append(
                        Markdown(self.print_tool_call(section['content'], return_str=True))
                    )
                elif section["type"] == "result":
                    rendered.append(
                        Markdown(self.print_tool_result(section['content'], return_str=True))
                    )
                    rendered.append(Text())
            
            return Panel(
                Group(*rendered),
                title="ü§ñ –û—Ç–≤–µ—Ç",
                border_style="blue",
                padding=(0, 1)
            )
        
        # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        sections.append({"type": "text", "content": ""})
        
        # –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—É—é Live –ø–∞–Ω–µ–ª—å
        live_panel = Live(
            render_sections(),
            console=self.console,
            refresh_per_second=self.refresh_rate,
            vertical_overflow="visible",
            auto_refresh=True,  # –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            transient=True  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        )
        
        with live_panel:
            async for chunk in stream:
                if first_chunk and not chunk.delta:
                    first_chunk = False
                    continue
                    
                if chunk.delta:
                    current_content += chunk.delta
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                    for section in reversed(sections):
                        if section["type"] == "text":
                            section["content"] += chunk.delta
                            break
                    need_refresh = True
                    first_chunk = False
                
                if chunk.tool_call and not current_tool:
                    current_tool = chunk.tool_call
                    sections.append({"type": "tool", "content": current_tool})
                    sections.append({"type": "text", "content": ""})
                    live_panel.update(render_sections())  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                
                if chunk.tool_result:
                    sections.append({"type": "result", "content": chunk.tool_result})
                    sections.append({"type": "text", "content": ""})
                    current_tool = None
                    live_panel.update(render_sections())  # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∞–∫–æ–ø–∏–ª–∏—Å—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –ø—Ä–æ—à–ª–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏
                if need_refresh and not (chunk.tool_call or chunk.tool_result):
                    live_panel.update(render_sections())
                    need_refresh = False
        
        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è Live –≤—ã–≤–æ–¥–∏–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é
        self.console.print(render_sections())
        return current_content
        
    async def handle_regular_stream(self, message: str, stream: Any):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∞ –±–µ–∑ Markdown"""
        current_content = ""
        current_tool = None
        first_chunk = True
        
        # –ü–µ—á–∞—Ç–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é —Ä–∞–º–∫—É
        print()
        self.console.print("ü§ñ –û—Ç–≤–µ—Ç:", style="blue bold")
        
        async for chunk in stream:            
            if first_chunk and not chunk.delta:
                first_chunk = False
                continue
                
            if chunk.delta:
                current_content += chunk.delta
                # –°—Ä–∞–∑—É –ø–µ—á–∞—Ç–∞–µ–º –Ω–æ–≤—ã–π —á–∞–Ω–∫
                self.console.print(chunk.delta, end="")
                first_chunk = False
            
            if chunk.tool_call and not current_tool:
                current_tool = chunk.tool_call
                self.print_tool_call(current_tool)
            
            if chunk.tool_result:
                self.print_tool_result(chunk.tool_result)
                current_tool = None
        
        print("\n")
        return current_content

    async def handle_stream(self, message: str, stream: Any):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            stream: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å—Ç—Ä–∏–º-—á–∞–Ω–∫–æ–≤
        """
        if self.use_markdown:
            return await self.handle_markdown_stream(message, stream)
        else:
            return await self.handle_regular_stream(message, stream)

    async def streaming_output_hook(self, message: IOMessage) -> AsyncGenerator[IOMessage, None]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Markdown –∏ –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
        
        Args:
            message: –°—Ç—Ä–∏–º-—Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        logger.debug("streaming_output_hook called with message: %s", message)
        
        if not message.stream:
            logger.debug("No stream in message, yielding as is")
            yield message
            return
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞ –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
        if not hasattr(self, '_stream_state') or not hasattr(self, '_current_stream') or self._current_stream is None:
            logger.debug("Initializing stream state (stream_state exists: %s, current_stream exists: %s)", 
                        hasattr(self, '_stream_state'), 
                        hasattr(self, '_current_stream'))
            self._init_stream_state()
            
        try:
            # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É–ª –∫–æ–ª–ª–æ–≤
            has_pending_tools = False
            
            # –°—Ä–∞–∑—É –Ω–∞—á–∏–Ω–∞–µ–º –∏—Ç–µ—Ä–∞—Ü–∏—é –ø–æ —Å—Ç—Ä–∏–º—É
            logger.debug("Starting stream iteration")
            async for chunk in message.stream:
                logger.debug("Processing chunk: %s", chunk)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
                if not hasattr(self, '_current_stream') or self._current_stream is None:
                    logger.warning("Stream state lost, reinitializing")
                    self._init_stream_state()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                if chunk.metadata.get("is_complete"):
                    logger.debug("Stream complete, checking tool calls state")
                    logger.debug("Current content: %s", self._stream_state['current_content'])
                    logger.debug("Has pending tools: %s", has_pending_tools)
                    logger.debug("Current sections: %s", self._stream_state['sections'])
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —á—Ç–æ-—Ç–æ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç–µ
                    has_content = bool(self._stream_state['current_content'].strip())
                    logger.debug("Has content: %s", has_content)
                    
                    # –î–µ–ª–∞–µ–º –ø–æ–ª–Ω—É—é –æ—á–∏—Å—Ç–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏:
                    # 1. –ù–µ—Ç –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ç—É–ª –∫–æ–ª–ª–æ–≤
                    # 2. –ù–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    # 3. –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–µ–∫—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è
                    last_section_empty = (
                        self._stream_state['sections'][-1]["type"] == "text" 
                        and not self._stream_state['sections'][-1]["content"].strip()
                    ) if self._stream_state['sections'] else True
                    
                    if not has_pending_tools and not has_content and not last_section_empty:
                        logger.debug("No pending tools, no content, and last section not empty - doing final cleanup")
                        self._cleanup_stream(final=True)
                    else:
                        logger.debug("Skipping cleanup (pending tools: %s, has content: %s, last section empty: %s)", 
                                   has_pending_tools, has_content, last_section_empty)
                        has_pending_tools = False  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å—Ç—Ä–∏–º–∞
                    yield chunk
                    continue
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å delta
                if chunk.metadata.get("delta"):
                    delta = chunk.metadata["delta"]
                    logger.debug("Got delta: %s", delta)
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–µ–∫—Ü–∏—é
                    for section in reversed(self._stream_state['sections']):
                        if section["type"] == "text":
                            section["content"] += delta
                            break
                    self._stream_state['current_content'] += delta
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_calls
                if chunk.tool_calls:
                    logger.debug("Processing tool calls: %s", chunk.tool_calls)
                    last_call = chunk.tool_calls[-1]
                    if "call" in last_call:
                        has_pending_tools = True
                        logger.debug("Found pending tool call")
                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é –¥–ª—è —Ç—É–ª –∫–æ–ª–ª–∞
                        self._stream_state['sections'].append({"type": "tool", "content": last_call["call"]})
                        
                    if "call" in last_call and "result" in last_call:
                        has_pending_tools = False
                        logger.debug("Tool call completed")
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–∫—Ü–∏—é —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –Ω–æ–≤—É—é —Ç–µ–∫—Å—Ç–æ–≤—É—é
                        self._stream_state['sections'].append({
                            "type": "result", 
                            "content": last_call["result"]["content"]
                        })
                        self._stream_state['sections'].append({"type": "text", "content": ""})
                        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
                        self._stream_state['current_content'] = ""
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                try:
                    if self._current_stream:
                        self._current_stream.update(self._render_sections())
                        logger.debug("Updated live panel")
                    else:
                        logger.warning("Live panel is None, skipping update")
                except Exception as e:
                    logger.error(f"Error updating live panel: {e}", exc_info=True)
                    # –ü—Ä–æ–±—É–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    self._init_stream_state()
                    
                yield chunk
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–∏–º –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –±–µ–∑ is_complete, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥
            if not has_pending_tools:
                logger.debug("Stream ended without is_complete, no pending tools, doing final cleanup")
                self._cleanup_stream(final=True)
            else:
                logger.debug("Stream ended without is_complete but has pending tools, skipping cleanup")
            
        except Exception as e:
            logger.error(f"Error in streaming_output_hook: {e}", exc_info=True)
            if not has_pending_tools:
                self._cleanup_stream(final=True)
            raise
            
    def _init_stream_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞"""
        logger.debug("Initializing stream state")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å–µ–∫—Ü–∏–∏ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        old_sections = []
        if hasattr(self, '_stream_state'):
            old_sections = self._stream_state['sections']
            
        self._stream_state = {
            'sections': old_sections if old_sections else [{"type": "text", "content": ""}],
            'current_content': "",
            'current_tool': None
        }
        
        # –°–æ–∑–¥–∞–µ–º Live –ø–∞–Ω–µ–ª—å –µ—Å–ª–∏ –µ—ë –µ—â–µ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ None
        if not hasattr(self, '_current_stream') or self._current_stream is None:
            logger.debug("Creating new live panel")
            self._current_stream = Live(
                self._render_sections(),
                console=self.console,
                refresh_per_second=self.refresh_rate,
                vertical_overflow="visible",
                auto_refresh=True,
                transient=True
            )
            self._current_stream.start()
            logger.debug("Live panel started")
        else:
            logger.debug("Using existing live panel")
        
    def _cleanup_stream(self, final: bool = False):
        """
        –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
        
        Args:
            final: –ï—Å–ª–∏ True, –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞–Ω–µ–ª—å
        """
        logger.debug("Cleaning up stream (final=%s)", final)
        if final:
            if hasattr(self, '_current_stream') and self._current_stream:
                try:
                    self._current_stream.stop()
                    self.console.print(self._render_sections())
                except Exception as e:
                    logger.error(f"Error stopping live panel: {e}", exc_info=True)
                finally:
                    self._current_stream = None
            if hasattr(self, '_stream_state'):
                delattr(self, '_stream_state')
        else:
            # –¢–æ–ª—å–∫–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if hasattr(self, '_stream_state'):
                self._stream_state['current_content'] = ""

    def _render_sections(self) -> Panel:
        """–†–µ–Ω–¥–µ—Ä–∏—Ç –≤—Å–µ —Å–µ–∫—Ü–∏–∏ –≤ –æ–¥–Ω—É –ø–∞–Ω–µ–ª—å"""
        rendered = []
        for section in self._stream_state['sections']:
            if section["type"] == "text":
                rendered.append(Markdown(section["content"]))
            elif section["type"] == "tool":
                rendered.append(
                    Markdown(f"> üîß **–ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç**: {section['content']['function']['name']}...")
                )
            elif section["type"] == "result":
                rendered.append(
                    Markdown(f"> ‚úÖ **–†–µ–∑—É–ª—å—Ç–∞—Ç**: {section['content']}")
                )
                rendered.append(Text())
        
        return Panel(
            Group(*rendered),
            title="ü§ñ –û—Ç–≤–µ—Ç",
            border_style="blue",
            padding=(0, 1)
        )

    async def output_hook(self, message: IOMessage) -> Optional[IOMessage]:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ-—Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            
        Returns:
            Optional[IOMessage]: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ None
        """
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ streaming_output_hook
        if message.is_async:
            return message
            
        if message.type == "text":
            prefix = "ü§ñ " if self.use_emojis else "Bot: "
            content = str(message.content) if message.content is not None else ""
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_calls –µ—Å–ª–∏ –µ—Å—Ç—å
            tool_calls = message.get_tool_calls()
            if tool_calls:
                for tool_call in tool_calls:
                    if "call" in tool_call:
                        self.print_tool_call(tool_call["call"])
                    if "result" in tool_call:
                        self.print_tool_result(tool_call["result"]["content"])
            
            # –í—ã–≤–æ–¥–∏–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
            if content:  # –í—ã–≤–æ–¥–∏–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —á—Ç–æ –≤—ã–≤–æ–¥–∏—Ç—å
                if self.use_markdown:
                    self.console.print(Panel(
                        Markdown(content),
                        title=prefix.strip(),
                        border_style="blue"
                    ))
                else:
                    print(f"{prefix}{content}")
                print()
            
        elif message.type == "error":
            prefix = "‚ùå " if self.use_emojis else "Error: "
            error_content = str(message.content) if message.content is not None else "Unknown error"
            self.console.print(Panel(
                Text(error_content, style="red"),
                title=prefix.strip(),
                border_style="red"
            ))
            print()
        
        return message

    def print_header(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
        prefix = "üî∑ " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}**{message}**"), style="blue bold")
        else:
            self.console.print(f"{prefix}{message}", style="blue bold")
            
    def print_info(self, message: str, end: str = "\n"):
        """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        prefix = "‚ÑπÔ∏è " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}{message}"), style="blue", end=end)
        else:
            self.console.print(f"{prefix}{message}", style="blue", end=end)
            
    def print_success(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ"""
        prefix = "‚úÖ " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}{message}"), style="green")
        else:
            self.console.print(f"{prefix}{message}", style="green")
            
    def print_warning(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ"""
        prefix = "‚ö†Ô∏è " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}{message}"), style="yellow")
        else:
            self.console.print(f"{prefix}{message}", style="yellow")
            
    def print_error(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        prefix = "‚ùå " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}{message}"), style="red")
        else:
            self.console.print(f"{prefix}{message}", style="red")
            
    def print_debug(self, message: str):
        """–í—ã–≤–æ–¥–∏—Ç –æ—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        prefix = "üîç " if self.use_emojis else ""
        if self.use_markdown:
            self.console.print(Markdown(f"{prefix}{message}"), style="dim")
        else:
            self.console.print(f"{prefix}{message}", style="dim")

    async def input_hook(self, message: IOMessage) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
        –í –∫–æ–Ω—Å–æ–ª—å–Ω–æ–º –ø–ª–∞–≥–∏–Ω–µ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–∞–ª—å—à–µ.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
        Returns:
            bool: True - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        return True