import asyncio
from typing import Optional, Dict, Any, List, AsyncGenerator
import json
from datetime import datetime
import logging
import time
import os
import telegramify_markdown
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

from cognistruct.core import BasePlugin, IOMessage, PluginMetadata
from cognistruct.llm.interfaces import StreamChunk
from .bot import TelegramBot
from .database import TelegramDatabase
from .handlers import TelegramHandlers
from .utils import format_message, send_content_box

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.getLogger("httpx").setLevel(logging.WARNING)
telegramify_logger = logging.getLogger("telegramify_markdown")
telegramify_logger.setLevel(logging.INFO)
telegramify_logger.warn = telegramify_logger.warning  # –î–æ–±–∞–≤–ª—è–µ–º –∞–ª–∏–∞—Å –¥–ª—è warn

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Ä–æ–≤–µ–Ω—å DEBUG –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞

class TelegramPlugin(BasePlugin):
    """Telegram –ø–ª–∞–≥–∏–Ω –¥–ª—è CogniStruct"""
    
    def __init__(self, telegram_user_id: str = None):
        super().__init__()
        self.bot = None
        self.db = None
        self.handlers = None
        self._current_chat_id = None  # –¢–µ–∫—É—â–∏–π —á–∞—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        self.telegram_user_id = telegram_user_id  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        self._chat_linked_callbacks = []  # –ö–æ–ª–ª–±—ç–∫–∏ –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞
        logger.info("üöÄ TelegramPlugin initialized")
        
    def get_metadata(self) -> PluginMetadata:
        return PluginMetadata(
            name="telegram",
            description="Telegram –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è",
            version="1.0.0",
            priority=10
        )
        
    def set_message_handler(self, handler):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.handlers:
            self.handlers.message_handler = handler
        else:
            raise RuntimeError("TelegramPlugin not initialized. Call setup() first")
        
    async def setup(self, token: str = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–≥–∏–Ω–∞
        
        Args:
            token: Telegram Bot —Ç–æ–∫–µ–Ω. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±–µ—Ä–µ—Ç—Å—è –∏–∑ TELEGRAM_BOT_TOKEN
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—Ç–∞—Ç—É—Å–µ —á–∞—Ç–∞
        """
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        self.register_input_type("telegram_message")
        self.register_output_type("message")
        self.register_output_type("action")
        self.register_output_type("confirmation_request")
        self.register_output_type("interactive_message")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
        self.token = token or os.getenv("TELEGRAM_BOT_TOKEN")
        if not self.token:
            raise ValueError("Telegram token not provided")
            
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = TelegramDatabase()
        await self.db.connect()
        
        self.bot = TelegramBot(self.token)
        self.handlers = TelegramHandlers(self.db, self.bot, self)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        self.bot.add_handler(CommandHandler("start", self.handlers.handle_start))
        self.bot.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handlers.handle_message))
        self.bot.add_handler(CallbackQueryHandler(self.handlers.handle_callback_query))
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.bot.start()
        await self.bot.start_polling()
        
        result = {"status": "initialized"}
        
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω user_id, –ø—Ä–æ–≤–µ—Ä—è–µ–º/—Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤—è–∑–∫—É —á–∞—Ç–∞
        if self.telegram_user_id:
            chat_id = await self.check_chat_link(self.telegram_user_id)
            if chat_id:
                logger.info(f"Found existing chat link: {chat_id}")
                self._current_chat_id = chat_id
                result.update({
                    "chat_status": "linked",
                    "chat_id": chat_id
                })
            else:
                key = await self.generate_key(self.telegram_user_id)
                logger.info(f"Generated new key for user {self.telegram_user_id}: {key}")
                result.update({
                    "chat_status": "not_linked",
                    "key": key
                })
        
        logger.info("Telegram bot initialized and polling started")
        return result
        
    async def setup_minimal(self, token: str = None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.db = TelegramDatabase()
        await self.db.connect()


    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        if self.bot:
            await self.bot.stop()
        if self.db:
            await self.db.close()
        
    async def input_hook(self, message: IOMessage) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É —á–∞—Ç–∞.
        
        Returns:
            True - –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–∞–ª—å—à–µ
            False - –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        logger.debug(f"Input hook received message: {message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Telegram
        if message.source == "telegram":
            chat_id = message.metadata.get("chat_id")
            if not chat_id:
                logger.warning("No chat_id in message metadata")
                return False  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ chat_id
                
            logger.debug(f"Checking chat link for chat_id: {chat_id}")
            chat_link = await self.db.get_chat_link(chat_id)
            
            if not chat_link:
                logger.warning(f"Chat {chat_id} not linked to any user")
                await self.bot.send_message(
                    chat_id,
                    "–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º"
                )
                return False  # –ë–ª–æ–∫–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω
                
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            logger.debug(f"Chat {chat_id} is linked to user {chat_link['user_id']}")
            self._current_chat_id = chat_id
            return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —á–∞—Ç –ø—Ä–∏–≤—è–∑–∞–Ω
            
        logger.debug("Message is not from Telegram, passing through")
        return True  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ-Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
        
    async def output_hook(self, message: IOMessage) -> Optional[IOMessage]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Å—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        chat_id = (
            message.metadata.get("chat_id") or  # –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            (message.context.metadata.get("chat_id") if message.context else None) or  # –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            self._current_chat_id or  # –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞
            (  # –∏–ª–∏ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–æ user_id
                await self.get_chat_id(str(message.context.user_id if message.context else message.metadata.get("user_id")))
                if message.context or "user_id" in message.metadata
                else None
            )
        )
        
        if not chat_id:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id")
            return message
            
        logger.debug(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º chat_id: {chat_id} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è: {message}")
        
        try:
            content = ""
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º tool_calls –µ—Å–ª–∏ –µ—Å—Ç—å
            tool_calls = message.get_tool_calls()
            if tool_calls:
                logger.debug(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é tool_calls: {tool_calls}")
                for tool_call in tool_calls:
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                    if "call" in tool_call:
                        tool_msg = IOMessage(
                            type="tool_call",
                            content=f"\nüîß –ò—Å–ø–æ–ª—å–∑—É—é –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {tool_call['call']['function']['name']}\n",
                            metadata={"chat_id": chat_id},
                            context=message.context  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        )
                        content += tool_msg.content
                        
                    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    if "result" in tool_call:
                        result_msg = IOMessage(
                            type="tool_result",
                            content=f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {tool_call['result']['content']}\n",
                            metadata={"chat_id": chat_id},
                            context=message.context  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        )
                        content += result_msg.content
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.content is not None:
                content += str(message.content)
                logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω –∫–æ–Ω—Ç–µ–Ω—Ç: {content}")

            # –ï—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
            if not content.strip():
                logger.warning("–ü—É—Å—Ç–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É—é –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä")
                content = "..."

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
            if message.type == "interactive_message" and "options" in message.metadata:
                logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏")
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                buttons = [
                    {
                        "text": option,
                        "callback_data": message.metadata.get("callback_data", [])[i] if message.metadata.get("callback_data") else f"option_{i}"
                    }
                    for i, option in enumerate(message.metadata["options"])
                ]
                await self.send_buttons(chat_id, content, buttons)
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                logger.debug("–û—Ç–ø—Ä–∞–≤–ª—è—é –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
                boxes = await format_message(content)
                for item in boxes:
                    await send_content_box(self.bot, chat_id, item)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await self.bot.send_message(
                chat_id=chat_id,
                text=content if content.strip() else "..."  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø—É—Å—Ç–æ–π
            )
                    
        logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return message

    async def streaming_output_hook(self, message: IOMessage) -> AsyncGenerator[IOMessage, None]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è Telegram.
        
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –ø–æ–∫–∞ –∏–¥–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—è.
        –°–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ output_hook.
        """
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∏–º–∞ –≤ Telegram")
        
        if not message.stream:
            logger.warning("‚ùå –ù–µ—Ç —Å—Ç—Ä–∏–º–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            yield message
            return
            
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å chat_id —Ä–∞–∑–Ω—ã–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏
        chat_id = (
            message.metadata.get("chat_id") or  # –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è
            (message.context.metadata.get("chat_id") if message.context else None) or  # –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            self._current_chat_id  # –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø–ª–∞–≥–∏–Ω–∞
        )
        
        if not chat_id:
            logger.warning("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å chat_id –¥–ª—è —Å—Ç—Ä–∏–º–∞")
            async for chunk in message.stream:
                yield chunk
            return
            
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            typing_task = asyncio.create_task(
                self._show_typing_indicator(chat_id)
            )
            logger.debug(f"üéØ –ó–∞–ø—É—â–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –¥–ª—è chat_id: {chat_id}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–∏–º–∞
            current_content = ""
            tool_calls = []
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å—Ç—Ä–∏–º
            async for chunk in message.stream:
                logger.debug(f"üìù –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫: {chunk.content[:50]}...")
                
                # –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ —á–∞–Ω–∫ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                if message.context and not chunk.context:
                    chunk.context = message.context
                    
                # –î–æ–±–∞–≤–ª—è–µ–º chat_id –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —á–∞–Ω–∫–∞
                if "chat_id" not in chunk.metadata:
                    chunk.metadata["chat_id"] = chat_id
                    
                # –ù–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
                if chunk.metadata.get("delta"):
                    current_content += chunk.metadata["delta"]
                    
                # –°–æ–±–∏—Ä–∞–µ–º tool_calls
                if chunk.tool_calls:
                    tool_calls.extend(chunk.tool_calls)
                                        
                yield chunk
                
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = IOMessage(
                type="text",
                content=current_content,
                metadata={"chat_id": chat_id},
                source="agent",
                context=message.context,
                tool_calls=tool_calls
            )
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ output_hook
            if len(current_content) > 0 or len(tool_calls) > 0:
                await self.output_hook(final_message)

            # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
            typing_task.cancel()
            logger.debug("‚úÖ –°—Ç—Ä–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –æ—Ç–∫–ª—é—á–µ–Ω")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–∏–º–∞: {e}", exc_info=True)
            # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if 'typing_task' in locals():
                typing_task.cancel()
            raise
        
    async def check_chat_link(self, user_id: str) -> Optional[str]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∏–≤—è–∑–∫—É —á–∞—Ç–∞ –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: ID —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            None: –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        chat_data = await self.db.get_chat_by_user(user_id)
        if chat_data:
            return chat_data["chat_id"]
        return None
        
    async def get_all_chat_links(self, user_id: str) -> list[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            list[str]: –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤
        """
        chats = await self.db.get_all_chats_by_user(user_id)
        return [chat["chat_id"] for chat in chats] 
        
    async def generate_key(self, user_id: str, expires_in: int = 3600) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª—é—á –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            expires_in: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–ª—é—á–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å)
            
        Returns:
            str: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
        """
        return await self.db.generate_secret_key(user_id, expires_in)
        
    async def get_chat_id(self, user_id: str) -> Optional[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: ID —á–∞—Ç–∞, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω
            None: –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        chat_data = await self.db.get_chat_by_user(user_id)
        if chat_data:
            return chat_data["chat_id"]
        return None
        
    async def send_typing(self, chat_id: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        logger.debug(f"Sending typing indicator to chat {chat_id}")
        try:
            await self.bot.send_chat_action(chat_id=chat_id, action="typing")
            logger.debug("Typing indicator sent successfully")
        except Exception as e:
            logger.error(f"Error sending typing indicator: {e}", exc_info=True)
        
    async def send_message_to_user(self, user_id: str, text: str, **kwargs):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        chat_id = await self.get_chat_id(user_id)
        if chat_id:
            await self.bot.send_message(chat_id=chat_id, text=text, **kwargs)
        else:
            logger.warning(f"No linked chat found for user {user_id}")
            
    async def request_confirmation(self, user_id: str, message: str, expires_in: int = 3600) -> str:
        """
        –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message: –¢–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            expires_in: –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            
        Returns:
            str: ID –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        """
        chat_id = await self.get_chat_id(user_id)
        if not chat_id:
            raise ValueError(f"No linked chat found for user {user_id}")
            
        confirmation_id = await self.db.create_confirmation(
            message=message,
            chat_id=chat_id,
            expires_in=expires_in
        )
        
        keyboard = [
            [
                {"text": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "callback_data": f"confirm_{confirmation_id}"},
                {"text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", "callback_data": f"reject_{confirmation_id}"}
            ]
        ]
        
        await self.bot.send_message(
            chat_id=chat_id,
            text=f"–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:\n\n{message}",
            reply_markup={"inline_keyboard": keyboard}
        )
        
        return confirmation_id 
        
    async def send_welcome_message(self, chat_id: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        await self.output_hook(
            IOMessage(
                type="text",
                content="–ü—Ä–∏–≤–µ—Ç! –Ø –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å.",
                metadata={"chat_id": chat_id}
            )
        ) 

    def register_chat_linked_callback(self, callback):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–æ–ª–ª–±—ç–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞"""
        if asyncio.iscoroutinefunction(callback):
            logger.debug(f"Registering async callback {callback.__name__}")
            self._chat_linked_callbacks.append(callback)
        else:
            logger.debug(f"Registering sync callback {callback.__name__}, wrapping in async")
            async def wrapper(*args, **kwargs):
                return callback(*args, **kwargs)
            self._chat_linked_callbacks.append(wrapper)
        logger.info(f"Registered chat linked callback, total callbacks: {len(self._chat_linked_callbacks)}")

    async def _notify_chat_linked(self, chat_id: str, user_id: str, user_info: Dict[str, Any] = None):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–ª–±—ç–∫–∏ –æ –ø—Ä–∏–≤—è–∑–∫–µ —á–∞—Ç–∞"""
        logger.debug(f"Notifying {len(self._chat_linked_callbacks)} callbacks about chat link: {chat_id} -> {user_id}")
        logger.debug(f"User info: {user_info}")
        for callback in self._chat_linked_callbacks:
            try:
                logger.debug(f"Executing callback {callback.__name__}")
                await callback(chat_id, user_id, user_info)
                logger.debug(f"Callback {callback.__name__} completed successfully")
            except Exception as e:
                logger.error(f"Error in chat linked callback {callback.__name__}: {e}", exc_info=True)

    async def send_buttons(self, chat_id: str, text: str, buttons: List[Dict[str, str]], **kwargs):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            buttons: –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [{"text": "–¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏", "callback_data": "data"}]
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        if not self.bot:
            logger.error("Bot not initialized")
            return

        await self.bot.send_message_with_buttons(chat_id, text, buttons, **kwargs)

    async def _show_typing_indicator(self, chat_id: str):
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
        
        Args:
            chat_id: ID —á–∞—Ç–∞
        """
        TYPING_INTERVAL = 4  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è typing –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
        try:
            while True:
                await self.bot.send_chat_action(
                    chat_id=chat_id, 
                    action="typing"
                )
                await asyncio.sleep(TYPING_INTERVAL)
        except asyncio.CancelledError:
            # –ù–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–¥–∞—á–∏
            pass
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞: {e}", exc_info=True) 