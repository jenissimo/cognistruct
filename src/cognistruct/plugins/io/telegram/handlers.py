import asyncio
from typing import Optional, Dict, Any, Callable, Awaitable
import logging
from datetime import datetime

from telegram import Update
from telegram.ext import ContextTypes

from cognistruct.core import IOMessage
from cognistruct.core.context import RequestContext
from .database import TelegramDatabase
from .bot import TelegramBot
from .utils import format_message, send_content_box

logger = logging.getLogger(__name__)

class TelegramHandlers:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram"""
    
    def __init__(self, db: TelegramDatabase, bot: TelegramBot, plugin: 'TelegramPlugin'):
        self.db = db
        self.bot = bot
        self.plugin = plugin
        self.message_handler: Optional[Callable[[IOMessage], Awaitable[None]]] = None
        
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        chat_id = update.effective_chat.id
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "–î–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ —á–∞—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —Å —Å–µ–∫—Ä–µ—Ç–Ω—ã–º –∫–ª—é—á–æ–º\n"
                "–ü—Ä–∏–º–µ—Ä: /start your-secret-key"
            )
            return
            
        secret_key = args[0]
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
            key_data = await self.db.check_secret_key(secret_key)
            
            if not key_data:
                logger.warning(f"Invalid key {secret_key}: key not found or expired")
                await update.message.reply_text(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–ª—é—á. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–ª—é—á."
                )
                return
                
            user_id = key_data["user_id"]
            
            # –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            await self.db.mark_key_used(secret_key)
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —á–∞—Ç
            await self.db.link_chat(str(chat_id), user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_user = update.effective_user
            user_info = {
                "telegram_username": telegram_user.username,
                "telegram_first_name": telegram_user.first_name,
                "telegram_last_name": telegram_user.last_name,
                "telegram_language_code": telegram_user.language_code
            }
            logger.debug(f"Got Telegram user info: {user_info}")
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–∏–≤—è–∑–∫–µ —á–∞—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            await self.plugin._notify_chat_linked(str(chat_id), user_id, user_info)
            
            #await update.message.reply_text(
            #    "–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π."
            #)
            
        except Exception as e:
            logger.error(f"Error linking chat: {e}")
            await update.message.reply_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
    async def handle_callback_query(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback query (–∫–Ω–æ–ø–æ–∫)"""
        logger.info("üîò –ü–æ–ª—É—á–µ–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ Telegram")
        query = update.callback_query
        data = query.data
        logger.debug(f"Callback data: {data}")
        
        if data.startswith("confirm_"):
            confirmation_id = data.replace("confirm_", "")
            status = "confirmed"
            logger.debug(f"Processing confirmation {confirmation_id} with status {status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.db.update_confirmation_status(confirmation_id, status)
            
            await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
            await query.edit_message_text(
                f"–î–µ–π—Å—Ç–≤–∏–µ {status}",
                reply_markup=None
            )
            logger.info("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        elif data.startswith("reject_"):
            confirmation_id = data.replace("reject_", "")
            status = "rejected"
            logger.debug(f"Processing rejection {confirmation_id} with status {status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            await self.db.update_confirmation_status(confirmation_id, status)
            
            await query.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
            await query.edit_message_text(
                f"–î–µ–π—Å—Ç–≤–∏–µ {status}",
                reply_markup=None
            )
            logger.info("‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
            
        else:
            # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            logger.info("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–Ω–æ–ø–∫–∏")
            chat_id = str(update.effective_chat.id)
            chat_link = await self.db.get_chat_link(chat_id)
            if not chat_link:
                logger.warning(f"Chat {chat_id} not linked to any user")
                await query.answer("–ß–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω")
                return
                
            logger.debug(f"Found chat link: {chat_link}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–∏
            selected_option = None
            for row in query.message.reply_markup.inline_keyboard:
                for button in row:
                    if button.callback_data == data:
                        selected_option = button.text
                        break
                if selected_option:
                    break
                    
            if not selected_option:
                logger.warning("Button not found in keyboard markup")
                await query.answer("–û—à–∏–±–∫–∞: –∫–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
                
            logger.debug(f"Selected option: {selected_option}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            telegram_user = update.effective_user
            user_info = {
                "telegram_username": telegram_user.username,
                "telegram_first_name": telegram_user.first_name,
                "telegram_last_name": telegram_user.last_name,
                "telegram_language_code": telegram_user.language_code
            }
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
            request_context = RequestContext(
                user_id=chat_link["user_id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –±–∞–∑—ã
                metadata={
                    "chat_id": chat_id,
                    "platform": "telegram",
                    "user_info": user_info,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    "message_id": query.message.message_id,
                    "message_date": query.message.date.timestamp(),
                    "callback_data": data,
                    "selected_option": selected_option
                },
                timestamp=datetime.now().timestamp()
            )
            logger.debug(f"Created request context: {request_context}")
                
            message = IOMessage(
                type="text",
                content=selected_option,
                metadata={
                    "chat_id": chat_id,
                    "user_id": chat_link["user_id"],
                    "user_info": user_info,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    "callback_data": data,
                    "selected_option": selected_option
                },
                source="telegram",
                context=request_context
            )
            logger.debug(f"Created IO message: {message}")
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
            if self.message_handler:
                await query.answer("–ü—Ä–∏–Ω—è—Ç–æ!")
                await query.edit_message_reply_markup(reply_markup=None)
                try:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
                    await self.bot.send_chat_action(chat_id=chat_id, action="typing")
                    logger.info("üîÑ –ü–µ—Ä–µ–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É...")
                    
                    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                    response = await self.message_handler(message)
                    
                    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ IOMessage, –ø–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    if isinstance(response, str):
                        response = IOMessage(
                            type="text",
                            content=response,
                            source="agent",
                            context=request_context  # –ü–µ—Ä–µ–¥–∞–µ–º —Ç–æ—Ç –∂–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç
                        )
                    elif isinstance(response, IOMessage) and not response.context:
                        response.context = request_context  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    
                    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}", exc_info=True)
                    await self.bot.send_message(
                        chat_id=chat_id,
                        text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    )
            
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        logger.info("üîµ –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram")
        chat_id = update.effective_chat.id
        logger.debug(f"Chat ID: {chat_id}, Message: {update.message.text[:50]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤—è–∑–∫—É —á–∞—Ç–∞
        chat_link = await self.db.get_chat_link(str(chat_id))
        if not chat_link:
            logger.warning(f"Chat {chat_id} not linked to any user")
            await update.message.reply_text(
                "–≠—Ç–æ—Ç —á–∞—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏."
            )
            return
            
        logger.debug(f"Found chat link: {chat_link}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        telegram_user = update.effective_user
        user_info = {
            "telegram_username": telegram_user.username,
            "telegram_first_name": telegram_user.first_name,
            "telegram_last_name": telegram_user.last_name,
            "telegram_language_code": telegram_user.language_code
        }
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ —Å –æ—á–∏—â–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        request_context = RequestContext(
            user_id=chat_link["user_id"],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –∏–∑ –±–∞–∑—ã
            metadata={
                "chat_id": str(chat_id),
                "platform": "telegram",
                "user_info": user_info,  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                "message_id": update.message.message_id,
                "message_date": update.message.date.timestamp()
            },
            timestamp=datetime.now().timestamp()
        )
        logger.debug(f"Created request context: {request_context}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = IOMessage(
            type="text",
            content=update.message.text,
            metadata={
                "chat_id": str(chat_id),
                "user_id": chat_link["user_id"],
                "user_info": user_info  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            },
            source="telegram",
            context=request_context
        )
        logger.debug(f"Created IO message: {message}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
        if self.message_handler:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞
                await self.bot.send_chat_action(chat_id=chat_id, action="typing")
                logger.info("üîÑ –ü–µ—Ä–µ–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É...")
                
                # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
                response = await self.message_handler(message)
                
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä (—Å—Ç—Ä–∏–º)
                if hasattr(response, '__aiter__'):
                    logger.debug("–ü–æ–ª—É—á–µ–Ω —Å—Ç—Ä–∏–º-–æ—Ç–≤–µ—Ç")
                    # –°–æ–∑–¥–∞–µ–º IOMessage —Å–æ —Å—Ç—Ä–∏–º–æ–º
                    stream_message = IOMessage.create_stream(
                        response,
                        source="agent",
                        context=request_context
                    )
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ streaming_output_hook –ø–ª–∞–≥–∏–Ω–∞
                    async for chunk in self.plugin.streaming_output_hook(stream_message):
                        # –ß–∞–Ω–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤ streaming_output_hook
                        pass
                        
                # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ IOMessage
                else:
                    logger.debug("–ü–æ–ª—É—á–µ–Ω –æ–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç")
                    if isinstance(response, str):
                        response = IOMessage(
                            type="text",
                            content=response,
                            source="agent",
                            context=request_context
                        )
                    elif isinstance(response, IOMessage) and not response.context:
                        response.context = request_context
                        
                    # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç –≤ output_hook –ø–ª–∞–≥–∏–Ω–∞
                    await self.plugin.output_hook(response)
                    
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
                await update.message.reply_text(
                    "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        else:
            logger.warning("‚ùó Message handler not set") 