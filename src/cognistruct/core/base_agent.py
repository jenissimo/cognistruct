from typing import Dict, Any, Optional, List, AsyncGenerator, Union, Callable, Awaitable
import asyncio
import json
import logging

from cognistruct.llm import BaseLLM
from cognistruct.llm.interfaces import StreamChunk, ToolCall
from .plugin_manager import PluginManager
from .base_plugin import IOMessage
from .messages import IOMessage
from .context import RequestContext

logger = logging.getLogger(__name__)


class BaseAgent:
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ä–∞–±–æ—Ç—É —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º.
    """

    def __init__(self, llm: BaseLLM, auto_load_plugins: bool = False):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
        
        Args:
            llm: –ú–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
            auto_load_plugins: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–ª–∞–≥–∏–Ω—ã –ø—Ä–∏ setup
        """
        self.llm = llm
        self.plugin_manager = PluginManager()
        self.auto_load_plugins = auto_load_plugins
        self._current_system_prompt: Optional[str] = None
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –≤ plugin_manager
        self.plugin_manager.set_agent(self)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–ª–∞–≥–∏–Ω—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if auto_load_plugins:
            self.plugin_manager.load_plugins()
            
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è LLM
        self.llm.set_tool_executor(self.plugin_manager.execute_tool)

    async def start(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞"""
        if self.auto_load_plugins:
            await self.plugin_manager.load_plugins()
            logger.info("Loaded plugins: %s", 
                       [p.name for p in self.plugin_manager.get_all_plugins()])

    async def cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –∞–≥–µ–Ω—Ç–∞"""
        await self.plugin_manager.cleanup()
        await self.llm.close()

    async def _prepare_llm_messages(
        self,
        message: IOMessage,
        system_prompt: Optional[str] = None,
        context: Optional[RequestContext] = None
    ) -> List[Dict[str, str]]:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            List[Dict[str, str]]: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è LLM
        """
        messages = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
        if system_prompt:
            # –ï—Å–ª–∏ system_prompt —ç—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º –µ—ë
            if callable(system_prompt):
                try:
                    prompt_content = system_prompt()
                except Exception as e:
                    logger.error(f"Error calling system_prompt function: {e}")
                    prompt_content = ""
            else:
                prompt_content = system_prompt
                
            messages.append({
                "role": "system",
                "content": prompt_content
            })
            
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç RAG-—Ö—É–∫–æ–≤
        rag_context = await self.plugin_manager.execute_rag_hooks(message)
        if rag_context:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç RAG –≤ —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            rag_prompt = "\n–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:\n"
            for plugin_name, plugin_context in rag_context.items():
                rag_prompt += f"\n–û—Ç {plugin_name}:\n{json.dumps(plugin_context, ensure_ascii=False, indent=2)}"
            
            messages.append({
                "role": "system",
                "content": rag_prompt
            })
            
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        messages.append({
            "role": "user",
            "content": message.content
        })
        
        return messages

    async def _process_stream_through_plugins(
        self,
        stream_message: IOMessage,
        metadata: Dict[str, Any]
    ) -> AsyncGenerator[IOMessage, None]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∏–º-—Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω—ã"""
        current_stream = stream_message
        last_chunk = None
        tool_calls = []

        logger.debug(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω—ã")

        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ streaming_output_hooks –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
        for plugin in self.plugin_manager.get_all_plugins():
            if hasattr(plugin, 'streaming_output_hook'):
                logger.debug(f"üîÑ –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–∏–º —á–µ—Ä–µ–∑ –ø–ª–∞–≥–∏–Ω {plugin.__class__.__name__}")
                try:
                    plugin_stream = plugin.streaming_output_hook(current_stream)
                    logger.debug(f"‚ú® –°–æ–∑–¥–∞–Ω —Å—Ç—Ä–∏–º –¥–ª—è –ø–ª–∞–≥–∏–Ω–∞ {plugin.__class__.__name__}")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –æ—Ç –ø–ª–∞–≥–∏–Ω–∞
                    async for chunk in plugin_stream:
                        logger.debug(f"üì¶ –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ –æ—Ç {plugin.__class__.__name__}: {chunk}")
                        if chunk and chunk.stream:
                            current_stream = chunk
                            logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω —Ç–µ–∫—É—â–∏–π —Å—Ç—Ä–∏–º –æ—Ç {plugin.__class__.__name__}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–≥–∏–Ω–µ {plugin.__class__.__name__}: {e}", exc_info=True)
                    raise

        # –û—Ç–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∏–º –∏ —Å–æ–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –∏ tool_calls
        if current_stream and current_stream.stream:
            logger.debug("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–¥–∞–≤–∞—Ç—å —á–∞–Ω–∫–∏ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞")
            async for chunk in current_stream.stream:
                chunk.metadata.update(metadata)
                # –°–æ–±–∏—Ä–∞–µ–º tool_calls
                if chunk.tool_calls:
                    tool_calls.extend(chunk.tool_calls)
                    logger.debug(f"üîß –î–æ–±–∞–≤–ª–µ–Ω—ã tool_calls: {chunk.tool_calls}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫
                last_chunk = chunk
                logger.debug(f"üìù –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫: {chunk}")
                
                yield chunk
            logger.debug("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ—Ç–¥–∞—á–∞ —á–∞–Ω–∫–æ–≤ –∏–∑ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç—Ä–∏–º–∞")

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ output_hooks
        if last_chunk:
            logger.debug(f"üìã –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ (–¥–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(last_chunk.content)})")
            # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞–Ω–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            final_message = IOMessage(
                type="text",
                content=last_chunk.content,
                metadata=metadata,
                source=current_stream.source,
                is_async=current_stream.is_async,
                tool_calls=tool_calls,
                context=current_stream.context  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            )
            
            logger.debug(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ output_hooks")
            await self._process_complete_message(final_message)

    async def _process_complete_message(
        self,
        message: IOMessage
    ) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ output_hooks
        
        Args:
            message: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        logger.debug("Processing complete message through output_hooks")
        for plugin in self.plugin_manager.get_all_plugins():
            if hasattr(plugin, 'output_hook'):
                try:
                    processed = await plugin.output_hook(message)
                    if processed is not None:
                        message = processed
                except Exception as e:
                    logger.error(f"Error in output_hook of plugin {plugin.__class__.__name__}: {e}")

    async def handle_message(
        self,
        message: Union[str, IOMessage],
        system_prompt: Optional[str] = None,
        stream: bool = False,
        **kwargs
    ) -> Union[str, AsyncGenerator[IOMessage, None]]:
        """
        –ü—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        
        Args:
            message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ IOMessage
            system_prompt: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM
            stream: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ—Ç–æ–∫–æ–≤—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
            **kwargs: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è LLM
            
        Returns:
            Union[str, AsyncGenerator[IOMessage, None]]: –û—Ç–≤–µ—Ç –∏–ª–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–æ–≤
        """
        logger.debug(f"handle_message called with stream={stream}")
        return await self.process_message(message, system_prompt, stream, **kwargs)

    async def process_message(
        self,
        message: Union[str, IOMessage],
        system_prompt: Optional[str] = None,
        stream: bool = False,
        message_preprocessor: Optional[Callable[[IOMessage], Awaitable[IOMessage]]] = None,
        **kwargs
    ) -> Union[str, AsyncGenerator[IOMessage, None]]:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        logger.debug("process_message called with stream=%s", stream)
        
        # –°–æ–∑–¥–∞–µ–º IOMessage –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å—Ç—Ä–æ–∫—É
        if isinstance(message, str):
            message = IOMessage(
                type="text",
                content=message,
                source="user"
            )
            
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ input_hooks –≤—Å–µ—Ö –ø–ª–∞–≥–∏–Ω–æ–≤
        for plugin in self.plugin_manager.get_all_plugins():
            if hasattr(plugin, 'input_hook'):
                try:
                    should_continue = await plugin.input_hook(message)
                    if not should_continue:
                        logger.debug(f"Message blocked by plugin {plugin.__class__.__name__}")
                        return None
                except Exception as e:
                    logger.error(f"Error in input_hook of plugin {plugin.__class__.__name__}: {e}")
                    return None
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context = message.context
        if not context:
            logger.warning("Message has no context, creating default")
            context = RequestContext(user_id="default")
            message.context = context
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
        message_text = message.content
        metadata = message.metadata
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        messages = await self._prepare_llm_messages(message, system_prompt, context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –æ—Ç –ø–ª–∞–≥–∏–Ω–æ–≤
        tools = self.plugin_manager.get_all_tools()
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
        request_params = {
            "messages": messages,
            "tools": tools if tools else None,
            "stream": stream,
            "context": context,  # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            **kwargs
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç LLM
        response = await self.llm.generate_response(**request_params)
        
        if stream:
            logger.debug("Processing stream through plugins")
            stream_message = IOMessage.create_stream(response, metadata=metadata)
            logger.debug(f"üîÑ –°–æ–∑–¥–∞–Ω —Å—Ç—Ä–∏–º-—Å–æ–æ–±—â–µ–Ω–∏–µ: {stream_message}")
            stream_message.context = context  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å—Ç—Ä–∏–º-—Å–æ–æ–±—â–µ–Ω–∏—è
            
            async def stream_generator():
                logger.debug("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∏–º–∞")
                async for chunk in self._process_stream_through_plugins(stream_message, metadata):
                    yield chunk
                    
            return stream_generator()
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            response_message = response
            response_message.metadata.update(metadata)
            response_message.context = context  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–≤–µ—Ç–∞
            
            if kwargs.get('message_preprocessor'):
                try:
                    response_message = await kwargs['message_preprocessor'](response_message)
                except Exception as e:
                    logger.error(f"Error in message preprocessor: {e}", exc_info=True)
            
            # –ó–∞—Ç–µ–º –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á–µ—Ä–µ–∑ output_hooks
            for plugin in self.plugin_manager.get_all_plugins():
                if hasattr(plugin, 'output_hook'):
                    processed = await plugin.output_hook(response_message)
                    if processed is None:
                        return None
                    response_message = processed
                    
            return response_message 