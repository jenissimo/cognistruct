from abc import ABC, abstractmethod
from typing import List, Optional, Any
from rich import print
from core import BaseAgent
from utils.prompts import load_prompt


class Stage(ABC):
    """–ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è —ç—Ç–∞–ø–æ–≤ –ø–∞–π–ø–ª–∞–π–Ω–∞"""
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —ç—Ç–∞–ø–∞"""
        self.stage_name = self.__class__.__name__.replace('Stage', '')
    
    def load_prompt(self, template_name: str, **kwargs) -> str:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ —Ä–µ–Ω–¥–µ—Ä–∏—Ç –ø—Ä–æ–º–ø—Ç –∏–∑ —à–∞–±–ª–æ–Ω–∞
        
        Args:
            template_name: –ò–º—è —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞ (–±–µ–∑ –ø—É—Ç–∏)
            **kwargs: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
            
        Returns:
            str: –û—Ç—Ä–µ–Ω–¥–µ—Ä–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞
        """
        return load_prompt(template_name, **kwargs)
    
    @abstractmethod
    async def run(self, db: Any, llm: Any, agent: BaseAgent) -> bool:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç —ç—Ç–∞–ø –æ–±—Ä–∞–±–æ—Ç–∫–∏
        
        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            llm: –û–±—ä–µ–∫—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–≥–∏–Ω–∞–º
            
        Returns:
            bool: True –µ—Å–ª–∏ —ç—Ç–∞–ø –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        pass


class StageChain:
    """–¶–µ–ø–æ—á–∫–∞ —ç—Ç–∞–ø–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ >>"""
    
    def __init__(self, stages: Optional[List[Stage]] = None):
        self.stages = stages or []

    def __rshift__(self, next_stage: 'Stage | StageChain') -> 'StageChain':
        """
        –ü–µ—Ä–µ–≥—Ä—É–∂–∞–µ–º –æ–ø–µ—Ä–∞—Ç–æ—Ä >>, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–ª—è—Ç—å —ç—Ç–∞–ø—ã –≤ —Ü–µ–ø–æ—á–∫—É
        
        Args:
            next_stage: –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –∏–ª–∏ —Ü–µ–ø–æ—á–∫–∞ —ç—Ç–∞–ø–æ–≤
            
        Returns:
            StageChain: –ù–æ–≤–∞—è —Ü–µ–ø–æ—á–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º —ç—Ç–∞–ø–æ–º
        """
        if isinstance(next_stage, StageChain):
            return StageChain(self.stages + next_stage.stages)
        else:
            return StageChain(self.stages + [next_stage])

    async def run(self, db: Any, llm: Any, agent: BaseAgent, start_from: Optional[str] = None) -> bool:
        """
        –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é —Å—Ç–∞–¥–∏—é –ø–æ –ø–æ—Ä—è–¥–∫—É
        
        Args:
            db: –û–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            llm: –û–±—ä–µ–∫—Ç —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏
            agent: –°—Å—ã–ª–∫–∞ –Ω–∞ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–ª–∞–≥–∏–Ω–∞–º
            start_from: –ò–º—è —ç—Ç–∞–ø–∞ —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            
        Returns:
            bool: True –µ—Å–ª–∏ –≤—Å–µ —ç—Ç–∞–ø—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ, False –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
        """
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å
        start_idx = 0
        if start_from:
            for i, stage in enumerate(self.stages):
                if stage.stage_name == start_from:
                    start_idx = i
                    print(f"[bold blue]üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —ç—Ç–∞–ø–∞: {start_from}[/bold blue]")
                    break
            else:
                print(f"[bold red]‚ùå –≠—Ç–∞–ø {start_from} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–π–ø–ª–∞–π–Ω–µ[/bold red]")
                return False
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º —ç—Ç–∞–ø—ã –Ω–∞—á–∏–Ω–∞—è —Å —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ
        for stage in self.stages[start_idx:]:
            print(f"\n[bold blue]=== –ó–∞–ø—É—Å–∫ —ç—Ç–∞–ø–∞: {stage.stage_name} ===[/bold blue]")
            try:
                success = await stage.run(db, llm, agent)
                if not success:
                    print(f"[bold yellow]‚ö† –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ {stage.stage_name}[/bold yellow]")
                    return False
            except Exception as e:
                print(f"[bold red]‚ùå –û—à–∏–±–∫–∞ –≤ —ç—Ç–∞–ø–µ {stage.stage_name}: {str(e)}[/bold red]")
                return False
                
        print("\n[bold green]‚ú® –ü–∞–π–ø–ª–∞–π–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω![/bold green]")
        return True 